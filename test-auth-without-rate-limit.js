const axios = require('axios');

async function testAuthWithoutRateLimit() {
  console.log('üîç PROBANDO AUTENTICACI√ìN SIN RATE LIMITING\n');
  console.log('=' .repeat(60));

  try {
    // 1. Probar login con delay entre intentos
    console.log('\n1Ô∏è‚É£ Probando login con delay...');
    
    for (let i = 1; i <= 3; i++) {
      console.log(`\n   üß™ Intento ${i}:`);
      
      try {
        const response = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
          email: 'test@example.com',
          password: 'test123'
        });
        
        console.log('      ‚úÖ Login exitoso!');
        console.log('      üîë Token recibido:', response.data.token ? 'S√ç' : 'NO');
        console.log('      üìä Respuesta:', JSON.stringify(response.data, null, 2));
        break;
        
      } catch (error) {
        console.log(`      ‚ùå Fall√≥: ${error.response?.data?.message || error.message}`);
        
        if (error.response?.status === 429) {
          console.log('      ‚ö†Ô∏è Rate limit alcanzado, esperando...');
          await new Promise(resolve => setTimeout(resolve, 2000)); // Esperar 2 segundos
        }
      }
      
      // Esperar entre intentos
      if (i < 3) {
        console.log('      ‚è≥ Esperando 1 segundo antes del siguiente intento...');
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    // 2. Probar con diferentes headers para evitar rate limiting
    console.log('\n2Ô∏è‚É£ Probando con headers personalizados...');
    
    try {
      const response = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
        email: 'test@example.com',
        password: 'test123'
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Test-Script/1.0',
          'X-Requested-With': 'XMLHttpRequest'
        }
      });
      
      console.log('   ‚úÖ Login exitoso con headers personalizados');
      console.log('   üîë Token:', response.data.token ? 'S√ç' : 'NO');
      
    } catch (error) {
      console.log('   ‚ùå Login fall√≥ con headers personalizados:', error.response?.data?.message || error.message);
    }

    // 3. Probar endpoint de debug para ver si hay problemas de configuraci√≥n
    console.log('\n3Ô∏è‚É£ Verificando configuraci√≥n del backend...');
    
    try {
      const debugResponse = await axios.get('https://experimento2-production-54c0.up.railway.app/debug-env');
      console.log('   ‚úÖ Debug exitoso:');
      console.log('      JWT_SECRET:', debugResponse.data.jwtSecret);
      console.log('      DATABASE_URL:', debugResponse.data.databaseUrl);
      console.log('      NODE_ENV:', debugResponse.data.nodeEnv);
      
      if (debugResponse.data.jwtSecret === 'NO CONFIGURADO') {
        console.log('   ‚ö†Ô∏è JWT_SECRET no est√° configurado en Railway');
      }
      
    } catch (error) {
      console.log('   ‚ùå Debug fall√≥:', error.response?.data?.message || error.message);
    }

    // 4. Probar si el problema est√° en la validaci√≥n de datos
    console.log('\n4Ô∏è‚É£ Probando validaci√≥n de datos...');
    
    try {
      const response = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
        email: 'test@example.com',
        password: 'test123'
      }, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 segundos de timeout
      });
      
      console.log('   ‚úÖ Login exitoso con timeout extendido');
      
    } catch (error) {
      if (error.code === 'ECONNABORTED') {
        console.log('   ‚ùå Timeout alcanzado - el backend est√° muy lento');
      } else {
        console.log('   ‚ùå Error de validaci√≥n:', error.response?.data?.message || error.message);
      }
    }

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ PRUEBA COMPLETADA');
}

testAuthWithoutRateLimit();
