const axios = require('axios');

// Configuraci√≥n
const CHATBOT_URL = 'http://localhost:8000';
const FRONTEND_URL = 'http://localhost:5173';

// Simular conversaci√≥n con calendario visual
async function testCalendarIntegration() {
  console.log('üß™ Probando integraci√≥n del calendario visual...\n');

  try {
    // 1. Iniciar conversaci√≥n
    console.log('1. üëã Iniciando conversaci√≥n...');
    let response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: 'hola',
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Respuesta:', response.data.response);

    // 2. Solicitar cita
    console.log('\n2. üìÖ Solicitando cita...');
    response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: 'queria una cita',
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Respuesta:', response.data.response);

    // 3. Proporcionar datos personales
    console.log('\n3. üë§ Proporcionando datos personales...');
    
    // Nombre
    response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: 'Juan P√©rez Garc√≠a',
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Nombre:', response.data.response);

    // Edad
    response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: '35',
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Edad:', response.data.response);

    // Tel√©fono
    response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: '612345678',
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Tel√©fono:', response.data.response);

    // Email
    response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: 'juan.perez@email.com',
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Email:', response.data.response);

    // Motivo
    response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: 'divorcio',
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Motivo:', response.data.response);

    // 4. Verificar activaci√≥n del calendario
    console.log('\n4. üìÖ Verificando activaci√≥n del calendario...');
    if (response.data.response.includes('calendario visual') || 
        response.data.response.includes('Se abrir√° un calendario')) {
      console.log('‚úÖ Calendario visual activado correctamente');
      console.log('üìã Mensaje del chatbot:', response.data.response);
    } else {
      console.log('‚ùå Calendario visual no se activ√≥');
      console.log('üìã Mensaje del chatbot:', response.data.response);
    }

    // 5. Simular selecci√≥n de fecha del calendario
    console.log('\n5. üóìÔ∏è Simulando selecci√≥n de fecha del calendario...');
    
    // Obtener fecha de ma√±ana
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const days = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];
    const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 
                   'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
    
    const formattedDate = `${days[tomorrow.getDay()]} ${tomorrow.getDate()} de ${months[tomorrow.getMonth()]} a las 10:00`;
    
    response = await axios.post(`${CHATBOT_URL}/chat`, {
      text: formattedDate,
      language: 'es',
      user_id: 'test_user_calendar'
    });
    console.log('‚úÖ Fecha seleccionada:', formattedDate);
    console.log('üìã Respuesta del chatbot:', response.data.response);

    // 6. Verificar confirmaci√≥n
    console.log('\n6. ‚úÖ Verificando confirmaci√≥n...');
    if (response.data.response.includes('Resumen de tu cita') || 
        response.data.response.includes('¬øEst√° todo correcto?')) {
      console.log('‚úÖ Confirmaci√≥n mostrada correctamente');
    } else {
      console.log('‚ùå Confirmaci√≥n no se mostr√≥ correctamente');
    }

    console.log('\nüéâ Prueba de integraci√≥n del calendario completada!');
    console.log('\nüìã Resumen de funcionalidades probadas:');
    console.log('   ‚úÖ Activaci√≥n del calendario visual');
    console.log('   ‚úÖ Procesamiento de fechas del calendario');
    console.log('   ‚úÖ Confirmaci√≥n de cita');
    console.log('   ‚úÖ Flujo completo de conversaci√≥n');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error.response?.data || error.message);
    
    if (error.response?.status === 404) {
      console.log('\nüí° Soluci√≥n: Verifica que el chatbot est√© ejecut√°ndose en el puerto 8000');
      console.log('   Ejecuta: cd experimento/chatbot && python main_improved.py');
    }
  }
}

// Funci√≥n para probar el componente React del calendario
async function testCalendarComponent() {
  console.log('\nüß™ Probando componente React del calendario...\n');

  try {
    // Verificar que el frontend est√© ejecut√°ndose
    const frontendResponse = await axios.get(`${FRONTEND_URL}`, { timeout: 5000 });
    console.log('‚úÖ Frontend ejecut√°ndose en:', FRONTEND_URL);
    
    console.log('\nüìã Para probar el calendario visual:');
    console.log('   1. Abre el navegador en:', FRONTEND_URL);
    console.log('   2. Haz clic en el bot√≥n del chat (esquina inferior derecha)');
    console.log('   3. Escribe "hola" y luego "queria una cita"');
    console.log('   4. Completa los datos personales');
    console.log('   5. Cuando aparezca el mensaje del calendario, se abrir√° autom√°ticamente');
    console.log('   6. Selecciona una fecha y hora');
    console.log('   7. Confirma la cita');

  } catch (error) {
    console.log('‚ùå Frontend no est√° ejecut√°ndose en:', FRONTEND_URL);
    console.log('üí° Soluci√≥n: Ejecuta el frontend');
    console.log('   Ejecuta: cd experimento/frontend && npm run dev');
  }
}

// Funci√≥n para verificar la estructura del calendario
function testCalendarStructure() {
  console.log('\nüß™ Verificando estructura del calendario...\n');

  const calendarFeatures = [
    '‚úÖ Componente AppointmentCalendar creado',
    '‚úÖ Integraci√≥n con ChatbotWidget',
    '‚úÖ Detecci√≥n autom√°tica de solicitud de fecha',
    '‚úÖ Formato de fecha compatible con chatbot',
    '‚úÖ Interfaz visual intuitiva',
    '‚úÖ Validaci√≥n de fechas futuras',
    '‚úÖ Horarios disponibles (9:00, 10:00, 11:00, 12:00, 16:00, 17:00)',
    '‚úÖ Solo d√≠as laborables (lunes a viernes)',
    '‚úÖ Pr√≥ximas 2 semanas de disponibilidad'
  ];

  calendarFeatures.forEach(feature => {
    console.log(feature);
  });

  console.log('\nüìã Caracter√≠sticas del calendario:');
  console.log('   ‚Ä¢ Vista de calendario en lado izquierdo');
  console.log('   ‚Ä¢ Horarios disponibles en lado derecho');
  console.log('   ‚Ä¢ Selecci√≥n visual de fecha y hora');
  console.log('   ‚Ä¢ Confirmaci√≥n antes de enviar');
  console.log('   ‚Ä¢ Integraci√≥n autom√°tica con el chat');
  console.log('   ‚Ä¢ Formato de fecha compatible con el backend');
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando pruebas del calendario visual del chatbot\n');
  
  testCalendarStructure();
  await testCalendarComponent();
  await testCalendarIntegration();
  
  console.log('\n‚ú® Todas las pruebas completadas!');
  console.log('\nüìñ Instrucciones para usar el calendario visual:');
  console.log('   1. El calendario se activa autom√°ticamente cuando el chatbot pide fecha');
  console.log('   2. Selecciona una fecha del lado izquierdo');
  console.log('   3. Selecciona un horario del lado derecho');
  console.log('   4. Haz clic en "Confirmar Cita"');
  console.log('   5. La fecha se env√≠a autom√°ticamente al chatbot');
  console.log('   6. Contin√∫a con la confirmaci√≥n normal');
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testCalendarIntegration, testCalendarComponent, testCalendarStructure }; 