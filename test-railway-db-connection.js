const axios = require('axios');

async function testRailwayDBConnection() {
  console.log('üîç VERIFICANDO CONEXI√ìN A BASE DE DATOS DESDE RAILWAY\n');
  console.log('=' .repeat(60));

  try {
    // 1. Verificar endpoint de estado de la base de datos
    console.log('\n1Ô∏è‚É£ Verificando estado de la base de datos...');
    
    try {
      const dbStatus = await axios.get('https://experimento2-production-54c0.up.railway.app/db-status');
      console.log('   ‚úÖ Estado de BD:', dbStatus.data.connected ? 'CONECTADO' : 'DESCONECTADO');
      console.log('   üìä Usuarios en BD:', dbStatus.data.userCount);
      console.log('   üìã Tablas disponibles:', dbStatus.data.tables.length);
      
      if (dbStatus.data.connected) {
        console.log('   ‚úÖ La base de datos est√° conectada desde Railway');
      } else {
        console.log('   ‚ùå La base de datos NO est√° conectada desde Railway');
        console.log('   üîç Error:', dbStatus.data.error);
        return;
      }
      
    } catch (error) {
      console.log('   ‚ùå Error verificando estado de BD:', error.response?.data?.message || error.message);
      return;
    }

    // 2. Verificar si hay alg√∫n problema con la consulta de usuarios
    console.log('\n2Ô∏è‚É£ Verificando consulta de usuarios...');
    
    try {
      // Intentar obtener usuarios a trav√©s de un endpoint que no requiera autenticaci√≥n
      const usersResponse = await axios.get('https://experimento2-production-54c0.up.railway.app/api/users');
      console.log('   ‚úÖ Usuarios obtenidos exitosamente');
      console.log('   üìä N√∫mero de usuarios:', usersResponse.data.length);
      
      if (usersResponse.data.length > 0) {
        console.log('   üë• Primer usuario:', usersResponse.data[0].email);
      }
      
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('   ‚úÖ Endpoint protegido (requiere autenticaci√≥n)');
      } else {
        console.log('   ‚ùå Error obteniendo usuarios:', error.response?.data?.message || error.message);
      }
    }

    // 3. Verificar si hay alg√∫n problema con bcrypt
    console.log('\n3Ô∏è‚É£ Verificando si hay problemas con bcrypt...');
    
    // Crear un endpoint de prueba que use bcrypt
    try {
      const testResponse = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
        email: 'test@example.com',
        password: 'test123'
      });
      
      console.log('   ‚úÖ Login exitoso (esto no deber√≠a pasar)');
      
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('   ‚úÖ Error 401 (como esperado)');
        
        // Verificar si hay alg√∫n mensaje de error espec√≠fico de bcrypt
        const errorMessage = error.response?.data?.message || '';
        if (errorMessage.includes('bcrypt') || errorMessage.includes('hash') || errorMessage.includes('password')) {
          console.log('   üîç Error relacionado con bcrypt/hash detectado');
        } else {
          console.log('   üîç Error gen√©rico de credenciales inv√°lidas');
        }
      } else {
        console.log('   ‚ùå Status inesperado:', error.response?.status);
      }
    }

    // 4. Verificar variables de entorno cr√≠ticas
    console.log('\n4Ô∏è‚É£ Verificando variables de entorno cr√≠ticas...');
    
    try {
      const debugResponse = await axios.get('https://experimento2-production-54c0.up.railway.app/debug-env');
      console.log('   ‚úÖ Debug exitoso:');
      console.log('      JWT_SECRET:', debugResponse.data.jwtSecret);
      console.log('      DATABASE_URL:', debugResponse.data.databaseUrl);
      console.log('      NODE_ENV:', debugResponse.data.nodeEnv);
      
      // Verificar si las variables est√°n configuradas correctamente
      if (debugResponse.data.jwtSecret === 'CONFIGURADO') {
        console.log('   ‚úÖ JWT_SECRET est√° configurado');
      } else {
        console.log('   ‚ùå JWT_SECRET NO est√° configurado');
      }
      
      if (debugResponse.data.databaseUrl === 'CONFIGURADO') {
        console.log('   ‚úÖ DATABASE_URL est√° configurado');
      } else {
        console.log('   ‚ùå DATABASE_URL NO est√° configurado');
      }
      
    } catch (error) {
      console.log('   ‚ùå Debug fall√≥:', error.response?.data?.message || error.message);
    }

    // 5. Verificar si hay alg√∫n problema con el c√≥digo del AuthService
    console.log('\n5Ô∏è‚É£ Verificando si hay problemas en el c√≥digo...');
    
    // Intentar con un usuario que sabemos que existe y tiene una contrase√±a simple
    try {
      const response = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
        email: 'admin@despacho.com',
        password: 'admin'
      });
      
      console.log('   ‚úÖ Login exitoso con admin/admin');
      
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('   ‚úÖ Login fall√≥ como esperado (admin/admin)');
        
        // Intentar con otra combinaci√≥n com√∫n
        try {
          const response2 = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
            email: 'admin@despacho.com',
            password: 'admin123'
          });
          
          console.log('   ‚úÖ Login exitoso con admin/admin123');
          
        } catch (error2) {
          console.log('   ‚ùå Login tambi√©n fall√≥ con admin/admin123');
          console.log('   üîç Esto confirma que hay un problema fundamental en el AuthService');
        }
      }
    }

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ VERIFICACI√ìN COMPLETADA');
}

testRailwayDBConnection();
