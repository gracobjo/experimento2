const axios = require('axios');

console.log('üîê PROBANDO FALLBACK CON AUTENTICACI√ìN REAL');
console.log('============================================\n');

const backendUrl = 'https://experimento2-production-54c0.up.railway.app';

// Simular el servicio de casos del frontend con fallback
class AuthenticatedCasesService {
  constructor(token) {
    this.token = token;
    this.headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
  }

  async getAllCases() {
    try {
      console.log('üîç Intentando endpoint principal...');
      const response = await axios.get(`${backendUrl}/api/cases`, {
        headers: this.headers
      });
      
      console.log('‚úÖ Endpoint principal funcion√≥');
      return response.data;
      
    } catch (error) {
      console.log('‚ö†Ô∏è Endpoint principal fall√≥:', error.response?.status || error.message);
      
      if (error.response?.status === 500) {
        console.log('üîÑ Activando modo fallback...');
        return this.getCasesFromDebugEndpoint();
      }
      
      throw error;
    }
  }

  async getCasesFromDebugEndpoint() {
    try {
      console.log('üîÑ Obteniendo casos desde endpoint de debug...');
      const response = await axios.get(`${backendUrl}/api/cases/debug/all`, {
        headers: this.headers
      });
      
      const debugData = response.data;
      console.log(`‚úÖ ${debugData.cases.length} casos obtenidos desde fallback`);
      
      // Convertir al formato est√°ndar
      const cases = debugData.cases.map(debugCase => ({
        id: debugCase.id,
        title: debugCase.title,
        status: debugCase.status,
        lawyerId: debugCase.lawyerId,
        clientId: debugCase.clientId,
        client: {
          id: debugCase.clientId,
          user: {
            id: debugCase.clientId,
            name: debugCase.clientName,
            email: `${debugCase.clientName.toLowerCase().replace(/\s+/g, '.')}@cliente.com`
          }
        },
        lawyer: {
          id: debugCase.lawyerId,
          name: debugCase.lawyerName,
          email: `${debugCase.lawyerName.toLowerCase().replace(/\s+/g, '.')}@abogado.com`
        },
        documents: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }));
      
      return cases;
      
    } catch (error) {
      console.error('‚ùå Error en fallback:', error.message);
      throw new Error('No se pudieron obtener los casos desde ning√∫n endpoint');
    }
  }

  async getCasesStats() {
    try {
      console.log('üîç Obteniendo estad√≠sticas...');
      const response = await axios.get(`${backendUrl}/api/cases/stats`, {
        headers: this.headers
      });
      console.log('‚úÖ Estad√≠sticas obtenidas');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error.message);
      throw error;
    }
  }

  async getMyCases() {
    try {
      console.log('üîç Intentando obtener mis casos...');
      const response = await axios.get(`${backendUrl}/api/cases/my`, {
        headers: this.headers
      });
      
      console.log('‚úÖ Mis casos obtenidos exitosamente');
      return response.data;
      
    } catch (error) {
      console.log('‚ö†Ô∏è Endpoint de mis casos fall√≥:', error.response?.status || error.message);
      
      if (error.response?.status === 500) {
        console.log('üîÑ Usando fallback para mis casos...');
        // Por ahora, retornar todos los casos ya que no tenemos filtrado por usuario
        return this.getCasesFromDebugEndpoint();
      }
      
      throw error;
    }
  }
}

// Funci√≥n para obtener token de autenticaci√≥n
async function getAuthToken() {
  try {
    console.log('üîë Obteniendo token de autenticaci√≥n...');
    
    // Intentar con diferentes credenciales
    const credentials = [
      { email: 'test@despacho.com', password: 'test123' },
      { email: 'admin@despacho.com', password: 'admin123' },
      { email: 'abogado@despacho.com', password: 'abogado123' }
    ];
    
    for (const cred of credentials) {
      try {
        console.log(`   üîë Probando: ${cred.email}`);
        const response = await axios.post(`${backendUrl}/api/auth/login`, cred);
        
        if (response.data.token) {
          console.log(`   ‚úÖ Login exitoso con: ${cred.email}`);
          return response.data.token;
        }
      } catch (error) {
        console.log(`   ‚ùå Fall√≥ con ${cred.email}:`, error.response?.status);
      }
    }
    
    throw new Error('No se pudo obtener token de autenticaci√≥n');
    
  } catch (error) {
    console.error('‚ùå Error obteniendo token:', error.message);
    throw error;
  }
}

// Funci√≥n para probar el flujo completo con autenticaci√≥n
async function testAuthenticatedFlow() {
  try {
    console.log('1Ô∏è‚É£ Obteniendo autenticaci√≥n...');
    const token = await getAuthToken();
    
    console.log('\n2Ô∏è‚É£ Creando servicio autenticado...');
    const service = new AuthenticatedCasesService(token);
    
    console.log('\n3Ô∏è‚É£ Probando endpoint principal...');
    try {
      const cases = await service.getAllCases();
      console.log(`   ‚úÖ Casos obtenidos del endpoint principal: ${cases.length}`);
      
      if (cases.length > 0) {
        console.log('   üìã Primer caso:', {
          id: cases[0].id,
          title: cases[0].title,
          status: cases[0].status
        });
      }
      
    } catch (error) {
      console.log('   ‚ùå Endpoint principal fall√≥, esto es esperado');
    }

    console.log('\n4Ô∏è‚É£ Probando endpoint de mis casos...');
    try {
      const myCases = await service.getMyCases();
      console.log(`   ‚úÖ Mis casos obtenidos: ${myCases.length}`);
    } catch (error) {
      console.log('   ‚ùå Error en mis casos:', error.message);
    }

    console.log('\n5Ô∏è‚É£ Probando estad√≠sticas...');
    try {
      const stats = await service.getCasesStats();
      console.log('   ‚úÖ Estad√≠sticas:', stats);
    } catch (error) {
      console.log('   ‚ùå Error en estad√≠sticas:', error.message);
    }

    console.log('\n6Ô∏è‚É£ Verificando que el fallback funciona...');
    try {
      // Forzar el uso del fallback
      const fallbackCases = await service.getCasesFromDebugEndpoint();
      console.log(`   ‚úÖ Fallback funcion√≥: ${fallbackCases.length} casos`);
      
      if (fallbackCases.length > 0) {
        console.log('   üìã Primer caso del fallback:', {
          id: fallbackCases[0].id,
          title: fallbackCases[0].title,
          status: fallbackCases[0].status,
          client: fallbackCases[0].client?.user?.name,
          lawyer: fallbackCases[0].lawyer?.name
        });
      }
      
    } catch (error) {
      console.log('   ‚ùå Fallback fall√≥:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Error general en la prueba:', error.message);
  }
}

// Ejecutar pruebas
async function runAllTests() {
  await testAuthenticatedFlow();
  
  console.log('\n‚úÖ PRUEBAS COMPLETADAS');
  console.log('======================');
  console.log('\nüìã RESUMEN:');
  console.log('- Si el fallback funciona con auth: El frontend puede mostrar datos');
  console.log('- Si el fallback falla: Hay un problema en la implementaci√≥n');
  console.log('- Si la auth falla: Problema de credenciales');
}

runAllTests().catch(console.error);
