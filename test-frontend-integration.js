const axios = require('axios');

// Configuraci√≥n del backend
const BACKEND_URL = 'https://experimento2-production-54c0.up.railway.app';

async function testFrontendIntegration() {
  console.log('üîç PROBANDO INTEGRACI√ìN FRONTEND-BACKEND\n');
  console.log('=' .repeat(60));

  try {
    // 1. Probar endpoint de estado de la base de datos
    console.log('\n1Ô∏è‚É£ Probando endpoint de estado de BD...');
    try {
      const dbStatus = await axios.get(`${BACKEND_URL}/db-status`);
      console.log('   ‚úÖ Estado de BD:', dbStatus.data.connected ? 'CONECTADO' : 'DESCONECTADO');
      console.log('   üìä Usuarios en BD:', dbStatus.data.userCount);
      console.log('   üìã Tablas disponibles:', dbStatus.data.tables.length);
    } catch (error) {
      console.log('   ‚ùå Error en endpoint de BD:', error.response?.data?.message || error.message);
    }

    // 2. Probar endpoint de autenticaci√≥n con usuario de prueba
    console.log('\n2Ô∏è‚É£ Probando endpoint de autenticaci√≥n...');
    let token = null;
    
    try {
      const authResponse = await axios.post(`${BACKEND_URL}/api/auth/login`, {
        email: 'test@example.com',
        password: 'test123'
      });
      console.log('   ‚úÖ Login exitoso');
      console.log('   üîë Token recibido:', authResponse.data.access_token ? 'S√ç' : 'NO');
      
      token = authResponse.data.access_token;
    } catch (error) {
      console.log('   ‚ùå Error en login:', error.response?.data?.message || error.message);
      console.log('   üîç Detalles del error:', error.response?.data);
      return; // No podemos continuar sin token
    }

    // 3. Probar endpoint de casos con autenticaci√≥n
    console.log('\n3Ô∏è‚É£ Probando endpoint de casos (con autenticaci√≥n)...');
    try {
      const casesResponse = await axios.get(`${BACKEND_URL}/api/cases`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚úÖ Casos obtenidos exitosamente');
      console.log('   üìÅ N√∫mero de casos:', casesResponse.data.length);
      
      if (casesResponse.data.length > 0) {
        console.log('   üìã Primer caso:', casesResponse.data[0].title);
      }
    } catch (error) {
      console.log('   ‚ùå Error obteniendo casos:', error.response?.data?.message || error.message);
    }

    // 4. Probar endpoint de usuarios
    console.log('\n4Ô∏è‚É£ Probando endpoint de usuarios...');
    try {
      const usersResponse = await axios.get(`${BACKEND_URL}/api/users`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚úÖ Usuarios obtenidos exitosamente');
      console.log('   üë• N√∫mero de usuarios:', usersResponse.data.length);
    } catch (error) {
      console.log('   ‚ùå Error obteniendo usuarios:', error.response?.data?.message || error.message);
    }

    // 5. Probar endpoint de facturas
    console.log('\n5Ô∏è‚É£ Probando endpoint de facturas...');
    try {
      const invoicesResponse = await axios.get(`${BACKEND_URL}/api/invoices`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚úÖ Facturas obtenidas exitosamente');
      console.log('   üí∞ N√∫mero de facturas:', invoicesResponse.data.length);
      
      if (invoicesResponse.data.length > 0) {
        console.log('   üìÑ Primera factura:', invoicesResponse.data[0].numeroFactura);
      }
    } catch (error) {
      console.log('   ‚ùå Error obteniendo facturas:', error.response?.data?.message || error.message);
    }

    // 6. Probar endpoint de documentos
    console.log('\n6Ô∏è‚É£ Probando endpoint de documentos...');
    try {
      const docsResponse = await axios.get(`${BACKEND_URL}/api/documents`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚úÖ Documentos obtenidos exitosamente');
      console.log('   üìÑ N√∫mero de documentos:', docsResponse.data.length);
    } catch (error) {
      console.log('   ‚ùå Error obteniendo documentos:', error.response?.data?.message || error.message);
    }

    // 7. Probar endpoint de tareas
    console.log('\n7Ô∏è‚É£ Probando endpoint de tareas...');
    try {
      const tasksResponse = await axios.get(`${BACKEND_URL}/api/tasks`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('   ‚úÖ Tareas obtenidas exitosamente');
      console.log('   ‚úÖ N√∫mero de tareas:', tasksResponse.data.length);
    } catch (error) {
      console.log('   ‚ùå Error obteniendo tareas:', error.response?.data?.message || error.message);
    }

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ PRUEBA DE INTEGRACI√ìN COMPLETADA');
}

testFrontendIntegration();
