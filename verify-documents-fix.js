const axios = require('axios');

console.log('üîç VERIFICANDO SI EL ERROR 500 EN DOCUMENTOS SE HA RESUELTO');
console.log('================================================================\n');

const backendUrl = 'https://experimento2-production-54c0.up.railway.app';

// Funci√≥n para verificar el estado del build
async function checkBuildStatus() {
  try {
    console.log('üîß VERIFICANDO ESTADO DEL BUILD');
    console.log('   üìä Status del servidor...');
    
    const response = await axios.get(`${backendUrl}/health`);
    const timestamp = new Date().toLocaleString('es-ES');
    
    console.log(`   üìä Status del servidor: ${response.status}`);
    console.log(`   üïê Timestamp: ${timestamp}`);
    
    if (response.status === 200) {
      console.log('   ‚úÖ Servidor activo y respondiendo');
    } else {
      console.log('   ‚ö†Ô∏è Servidor respondiendo pero con status inesperado');
    }
    
  } catch (error) {
    console.log('   ‚ùå Servidor no responde o en build:', error.message);
  }
}

// Funci√≥n para obtener token de autenticaci√≥n
async function getAuthToken() {
  try {
    console.log('\nüîë Obteniendo token de autenticaci√≥n...');
    
    const loginResponse = await axios.post(`${backendUrl}/api/auth/login`, {
      email: 'test@despacho.com',
      password: 'test123'
    });
    
    if (loginResponse.data.token) {
      console.log('   ‚úÖ Token obtenido exitosamente');
      return loginResponse.data.token;
    } else {
      throw new Error('No se recibi√≥ token');
    }
  } catch (error) {
    console.error('‚ùå Error obteniendo token:', error.message);
    throw error;
  }
}

// Funci√≥n para verificar el endpoint principal de documentos
async function verifyDocumentsEndpoint(token) {
  try {
    console.log('\n1Ô∏è‚É£ Probando endpoint principal de documentos...');
    
    try {
      const response = await axios.get(`${backendUrl}/api/documents`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('   üéâ ¬°√âXITO! Endpoint principal funcionando:', response.status);
      console.log(`   üìä Documentos obtenidos: ${Array.isArray(response.data) ? response.data.length : 'No es array'}`);
      
      if (Array.isArray(response.data) && response.data.length > 0) {
        console.log('   üìã Primer documento:', {
          id: response.data[0].id,
          filename: response.data[0].filename,
          expedienteId: response.data[0].expedienteId
        });
      }
      
      console.log('\n   üöÄ El backend de documentos est√° funcionando correctamente!');
      return true;
      
    } catch (error) {
      if (error.response?.status === 500) {
        console.log('   ‚ùå Error 500 persiste en /api/documents');
        console.log('   üìä Error data:', JSON.stringify(error.response.data, null, 2));
        console.log('\n   ‚è≥ El backend a√∫n est√° en build o la correcci√≥n no se ha aplicado');
        return false;
      } else {
        console.log('   ‚ùå Otro error:', error.response?.status, error.response?.data);
        return false;
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando endpoint de documentos:', error.message);
    return false;
  }
}

// Funci√≥n para verificar otros endpoints de documentos
async function verifyOtherDocumentEndpoints(token) {
  try {
    console.log('\n2Ô∏è‚É£ Verificando otros endpoints de documentos...');
    
    // Probar endpoint de mis documentos
    try {
      const myDocsResponse = await axios.get(`${backendUrl}/api/documents/my`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('   ‚úÖ Mis documentos:', myDocsResponse.status);
    } catch (error) {
      console.log('   ‚ùå Mis documentos fallaron:', error.response?.status, error.response?.data);
    }

    // Probar endpoint de estad√≠sticas
    try {
      const statsResponse = await axios.get(`${backendUrl}/api/documents/stats`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('   ‚úÖ Estad√≠sticas de documentos:', statsResponse.status);
    } catch (error) {
      console.log('   ‚ùå Estad√≠sticas fallaron:', error.response?.status, error.response?.data);
    }

  } catch (error) {
    console.error('‚ùå Error verificando otros endpoints:', error.message);
  }
}

// Funci√≥n para verificar que casos sigue funcionando
async function verifyCasesStillWorking(token) {
  try {
    console.log('\n3Ô∏è‚É£ Verificando que casos sigue funcionando...');
    
    try {
      const casesResponse = await axios.get(`${backendUrl}/api/cases`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('   ‚úÖ Casos (para confirmar estabilidad):', casesResponse.status);
    } catch (error) {
      console.log('   ‚ùå Casos fallaron (¬°esto ser√≠a un problema!):', error.response?.status);
    }

  } catch (error) {
    console.error('‚ùå Error verificando casos:', error.message);
  }
}

// Funci√≥n para verificar el estado de la base de datos
async function verifyDatabaseStatus() {
  try {
    console.log('\n4Ô∏è‚É£ Verificando estado de la base de datos...');
    
    try {
      const dbResponse = await axios.get(`${backendUrl}/db-status`);
      console.log('   ‚úÖ Base de datos:', dbResponse.data.connected ? 'Conectada' : 'Desconectada');
      
      if (dbResponse.data.tables) {
        const documentTable = dbResponse.data.tables.find(t => 
          t.table_name === 'Document' || 
          t.table_name === 'document'
        );
        
        if (documentTable) {
          console.log('   üìÑ Tabla Document: ‚úÖ Disponible');
        } else {
          console.log('   ‚ùå Tabla Document: No encontrada');
        }
      }
      
    } catch (error) {
      console.log('   ‚ùå Error verificando BD:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n de BD:', error.message);
  }
}

// Funci√≥n principal de verificaci√≥n
async function runVerification() {
  try {
    await checkBuildStatus();
    
    const token = await getAuthToken();
    
    const documentsFixed = await verifyDocumentsEndpoint(token);
    await verifyOtherDocumentEndpoints(token);
    await verifyCasesStillWorking(token);
    await verifyDatabaseStatus();
    
    console.log('\n‚úÖ VERIFICACI√ìN COMPLETADA');
    console.log('==========================');
    console.log('\nüìã RESUMEN:');
    
    if (documentsFixed) {
      console.log('üéâ ¬°PROBLEMA RESUELTO!');
      console.log('   ‚úÖ El endpoint /api/documents funciona correctamente');
      console.log('   ‚úÖ Los usuarios pueden acceder a sus documentos');
      console.log('   ‚úÖ El sistema est√° completamente operativo');
    } else {
      console.log('‚è≥ PROBLEMA PENDIENTE');
      console.log('   ‚ùå El endpoint /api/documents a√∫n falla con error 500');
      console.log('   üîÑ Posibles causas:');
      console.log('      - Backend a√∫n en build');
      console.log('      - Correcci√≥n no se aplic√≥ correctamente');
      console.log('      - Error en otra parte del c√≥digo');
      console.log('\n   üí° RECOMENDACIONES:');
      console.log('      - Esperar 5-10 minutos m√°s');
      console.log('      - Verificar logs de Railway');
      console.log('      - Ejecutar verificaci√≥n nuevamente');
    }
    
  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error.message);
  }
}

// Ejecutar verificaci√≥n
runVerification().catch(console.error);
