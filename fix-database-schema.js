const axios = require('axios');

console.log('üîß SINCRONIZANDO BASE DE DATOS CON ESQUEMA DE PRISMA');
console.log('=====================================================\n');

const backendUrl = 'https://experimento2-production-54c0.up.railway.app';

// Funci√≥n para verificar el estado actual de la base de datos
async function checkCurrentDatabaseState() {
  try {
    console.log('1Ô∏è‚É£ Verificando estado actual de la base de datos...');
    
    const dbResponse = await axios.get(`${backendUrl}/db-status`);
    console.log('   ‚úÖ Base de datos:', dbResponse.data.connected ? 'Conectada' : 'Desconectada');
    
    if (dbResponse.data.tables) {
      console.log(`   üìã Tablas disponibles: ${dbResponse.data.tables.length}`);
      
      // Buscar tabla de documentos
      const documentTable = dbResponse.data.tables.find(t => 
        t.table_name === 'Document' || 
        t.table_name === 'document'
      );
      
      if (documentTable) {
        console.log('   üìÑ Tabla Document: ‚úÖ Encontrada');
        console.log('   üìä Detalles:', documentTable);
        
        // Verificar si hay informaci√≥n de columnas
        if (dbResponse.data.columns) {
          const documentColumns = dbResponse.data.columns.filter(c => 
            c.table_name === 'Document' || 
            c.table_name === 'document'
          );
          
          if (documentColumns.length > 0) {
            console.log('   üîç Columnas de la tabla Document:');
            documentColumns.forEach(col => {
              console.log(`      - ${col.column_name}: ${col.data_type}`);
            });
            
            // Buscar espec√≠ficamente la columna fileData
            const fileDataColumn = documentColumns.find(c => 
              c.column_name === 'fileData' || 
              c.column_name === 'filedata'
            );
            
            if (fileDataColumn) {
              console.log('   ‚úÖ Columna fileData: Encontrada');
              console.log(`      Tipo: ${fileDataColumn.data_type}`);
            } else {
              console.log('   ‚ùå Columna fileData: NO ENCONTRADA');
              console.log('   üîÑ Necesita sincronizaci√≥n con esquema de Prisma');
            }
          }
        }
      } else {
        console.log('   ‚ùå Tabla Document: No encontrada');
      }
    }
    
  } catch (error) {
    console.log('   ‚ùå Error verificando BD:', error.message);
  }
}

// Funci√≥n para verificar el estado de las migraciones
async function checkMigrationStatus() {
  try {
    console.log('\n2Ô∏è‚É£ Verificando estado de las migraciones...');
    
    // Intentar acceder a un endpoint que podr√≠a mostrar informaci√≥n de migraciones
    try {
      const migrationResponse = await axios.get(`${backendUrl}/prisma-status`);
      console.log('   ‚úÖ Estado de Prisma:', migrationResponse.status);
      console.log('   üìä Datos:', migrationResponse.data);
    } catch (error) {
      console.log('   ‚ùå Endpoint de Prisma no disponible:', error.response?.status);
    }
    
    // Verificar si hay alg√∫n endpoint de debug de base de datos
    try {
      const debugResponse = await axios.get(`${backendUrl}/debug-db`);
      console.log('   ‚úÖ Debug de BD:', debugResponse.status);
      console.log('   üìä Datos:', debugResponse.data);
    } catch (error) {
      console.log('   ‚ùå Debug de BD no disponible:', error.response?.status);
    }
    
  } catch (error) {
    console.log('   ‚ùå Error verificando migraciones:', error.message);
  }
}

// Funci√≥n para probar endpoints de documentos despu√©s de la correcci√≥n
async function testDocumentEndpoints() {
  try {
    console.log('\n3Ô∏è‚É£ Probando endpoints de documentos...');
    
    // Obtener token de autenticaci√≥n
    let token;
    try {
      const loginResponse = await axios.post(`${backendUrl}/api/auth/login`, {
        email: 'test@despacho.com',
        password: 'test123'
      });
      
      if (loginResponse.data.token) {
        token = loginResponse.data.token;
        console.log('   ‚úÖ Token obtenido para pruebas');
      }
    } catch (error) {
      console.log('   ‚ùå Error obteniendo token:', error.message);
      return;
    }
    
    if (token) {
      // Probar endpoint principal de documentos
      try {
        const docsResponse = await axios.get(`${backendUrl}/api/documents`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        console.log('   ‚úÖ Lista de documentos:', docsResponse.status);
        
        if (Array.isArray(docsResponse.data) && docsResponse.data.length > 0) {
          const firstDoc = docsResponse.data[0];
          console.log(`   üìã Documento disponible: ${firstDoc.filename} (ID: ${firstDoc.id})`);
          
          // Probar endpoint de visualizaci√≥n
          try {
            const viewResponse = await axios.get(`${backendUrl}/api/documents/file/${firstDoc.id}`, {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            });
            console.log('   ‚úÖ Visualizaci√≥n de documento:', viewResponse.status);
          } catch (error) {
            console.log('   ‚ùå Visualizaci√≥n fall√≥:', error.response?.status, error.response?.data);
          }
        }
        
      } catch (error) {
        console.log('   ‚ùå Lista de documentos fall√≥:', error.response?.status);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error probando endpoints:', error.message);
  }
}

// Funci√≥n para sugerir soluciones
function suggestSolutions() {
  console.log('\n4Ô∏è‚É£ AN√ÅLISIS Y SOLUCIONES');
  console.log('==========================');
  console.log('\nüîç PROBLEMA IDENTIFICADO:');
  console.log('   ‚ùå La columna fileData no existe en la tabla Document');
  console.log('   ‚ùå La migraci√≥n 20250824212806_add_file_data_to_documents no se aplic√≥');
  console.log('   ‚ùå Los endpoints de visualizaci√≥n fallan con error 500');
  
  console.log('\nüí° SOLUCIONES RECOMENDADAS:');
  console.log('   1Ô∏è‚É£ FORZAR SINCRONIZACI√ìN DE PRISMA:');
  console.log('      - Ejecutar: npx prisma db push --force-reset');
  console.log('      - O ejecutar: npx prisma migrate deploy');
  console.log('      - O ejecutar: npx prisma db push');
  
  console.log('   2Ô∏è‚É£ VERIFICAR ESTADO DE MIGRACIONES:');
  console.log('      - Revisar logs de Railway para errores de migraci√≥n');
  console.log('      - Verificar que la base de datos est√© sincronizada');
  
  console.log('   3Ô∏è‚É£ ALTERNATIVA TEMPORAL:');
  console.log('      - Modificar el c√≥digo para no depender de fileData');
  console.log('      - Usar solo fileUrl para documentos');
  
  console.log('\nüöÄ PR√ìXIMOS PASOS:');
  console.log('   - Ejecutar migraci√≥n de Prisma en Railway');
  console.log('   - Verificar que la columna fileData se cree');
  console.log('   - Probar endpoints de visualizaci√≥n nuevamente');
}

// Ejecutar diagn√≥stico completo
async function runCompleteDiagnosis() {
  try {
    await checkCurrentDatabaseState();
    await checkMigrationStatus();
    await testDocumentEndpoints();
    suggestSolutions();
    
    console.log('\n‚úÖ DIAGN√ìSTICO COMPLETADO');
    console.log('==========================');
    
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico completo:', error.message);
  }
}

runCompleteDiagnosis().catch(console.error);
