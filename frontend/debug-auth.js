// Script para debuggear la autenticaci√≥n
// Ejecutar en la consola del navegador

console.log('üîç Debuggeando autenticaci√≥n...\n');

// 1. Verificar localStorage
console.log('1Ô∏è‚É£ LocalStorage:');
console.log('   Token:', localStorage.getItem('token') ? '‚úÖ Existe' : '‚ùå No existe');
console.log('   User:', localStorage.getItem('user') ? '‚úÖ Existe' : '‚ùå No existe');
console.log('   UserData:', localStorage.getItem('userData') ? '‚úÖ Existe' : '‚ùå No existe');

// 2. Verificar si hay token
const token = localStorage.getItem('token');
if (token) {
  console.log('\n2Ô∏è‚É£ Token JWT:');
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    console.log('   Email:', payload.email);
    console.log('   Role:', payload.role);
    console.log('   Expira:', new Date(payload.exp * 1000).toLocaleString());
    console.log('   V√°lido:', payload.exp * 1000 > Date.now() ? '‚úÖ S√≠' : '‚ùå No');
  } catch (error) {
    console.log('   ‚ùå Error decodificando token:', error.message);
  }
}

// 3. Verificar contexto de React (si est√° disponible)
console.log('\n3Ô∏è‚É£ Contexto de React:');
if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
  console.log('   ‚úÖ React DevTools disponible');
} else {
  console.log('   ‚ùå React DevTools no disponible');
}

// 4. Verificar si hay errores en consola
console.log('\n4Ô∏è‚É£ Errores en consola:');
console.log('   Revisa si hay errores de JavaScript arriba');

// 5. Verificar estado del usuario en el contexto
console.log('\n5Ô∏è‚É£ Estado del usuario:');
console.log('   Ejecuta esto despu√©s de hacer login:');
console.log('   console.log("Usuario en contexto:", useAuth().user);');

// 6. Verificar la respuesta del login
console.log('\n6Ô∏è‚É£ Para debuggear el login:');
console.log('   En la consola del navegador, ejecuta:');
console.log('   localStorage.setItem("debug", "true");');
console.log('   Luego haz login y revisa la consola para ver la respuesta completa');
