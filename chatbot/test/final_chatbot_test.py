#!/usr/bin/env python3
"""
Script final para probar el chatbot con logging detallado
"""

import requests
import json
import time

def test_chatbot_with_detailed_logging():
    """Prueba el chatbot con logging detallado para identificar el problema exacto"""
    
    chatbot_url = "http://localhost:8000"
    backend_url = "http://localhost:3000"
    
    print("üîç PRUEBA FINAL DEL CHATBOT CON LOGGING DETALLADO")
    print("=" * 60)
    
    # Verificar que el chatbot est√© funcionando
    try:
        health_response = requests.get(f"{chatbot_url}/health", timeout=5)
        print(f"‚úÖ Chatbot salud: {health_response.status_code}")
    except Exception as e:
        print(f"‚ùå Error conectando al chatbot: {e}")
        print("   Aseg√∫rate de que el chatbot est√© ejecut√°ndose en el puerto 8000")
        return
    
    # Verificar que el backend est√© funcionando
    try:
        backend_health = requests.get(f"{backend_url}/api/docs", timeout=5)
        print(f"‚úÖ Backend salud: {backend_health.status_code}")
    except Exception as e:
        print(f"‚ùå Error conectando al backend: {e}")
        print("   Aseg√∫rate de que el backend est√© ejecut√°ndose en el puerto 3000")
        return
    
    # Conversaci√≥n de prueba
    conversation = [
        "Hola",
        "Quiero una cita",
        "Juan P√©rez L√≥pez",
        "28",
        "+34 612 345 678",
        "juan.perez@email.com",
        "Problema con contrato de trabajo",
        "Derecho Laboral",
        "1",
        "S√≠, est√° todo correcto"
    ]
    
    print(f"\nüí¨ Iniciando conversaci√≥n con chatbot...")
    print("-" * 50)
    
    user_id = "test_user_final_123"
    
    for i, message in enumerate(conversation, 1):
        print(f"\n{i}. Enviando: '{message}'")
        
        try:
            response = requests.post(
                f"{chatbot_url}/chat",
                json={
                    "text": message,
                    "language": "es",
                    "user_id": user_id
                },
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                bot_response = result.get('response', 'Sin respuesta')
                print(f"   ü§ñ Respuesta: {bot_response[:150]}...")
                
                # Verificar si hay errores espec√≠ficos
                if "error" in bot_response.lower() or "problema" in bot_response.lower():
                    print(f"   ‚ö†Ô∏è  ERROR DETECTADO en la respuesta")
                    print(f"   üìÑ Respuesta completa: {bot_response}")
                    
                    # Si es el paso final y hay error, mostrar detalles
                    if i == 10:
                        print(f"\nüîç ANALIZANDO ERROR EN PASO FINAL...")
                        print(f"   ‚Ä¢ Mensaje enviado: '{message}'")
                        print(f"   ‚Ä¢ Respuesta del chatbot: '{bot_response}'")
                        print(f"   ‚Ä¢ User ID: {user_id}")
                        
                        # Verificar si hay citas creadas
                        print(f"\nüîç Verificando citas en backend...")
                        try:
                            appointments_response = requests.get(f"{backend_url}/api/appointments/visitor", timeout=5)
                            if appointments_response.status_code == 200:
                                appointments = appointments_response.json()
                                recent_appointments = [apt for apt in appointments if apt.get('fullName') == 'Juan P√©rez L√≥pez']
                                if recent_appointments:
                                    print(f"   ‚úÖ Se encontraron {len(recent_appointments)} citas para Juan P√©rez L√≥pez")
                                    for apt in recent_appointments:
                                        print(f"      üìÖ ID: {apt.get('id')} - Estado: {apt.get('status')}")
                                else:
                                    print(f"   ‚ùå No se encontraron citas para Juan P√©rez L√≥pez")
                            else:
                                print(f"   ‚ùå Error obteniendo citas: {appointments_response.status_code}")
                        except Exception as e:
                            print(f"   ‚ùå Error verificando citas: {e}")
                
            else:
                print(f"   ‚ùå Error HTTP: {response.status_code}")
                print(f"   üìÑ Respuesta: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")
        
        time.sleep(0.5)
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE LA PRUEBA")
    print("=" * 60)
    
    print("‚úÖ Si ves errores en el paso 10, el problema est√° en:")
    print("   1. La l√≥gica de confirmaci√≥n del chatbot")
    print("   2. El manejo de la respuesta del backend")
    print("   3. Los datos que se env√≠an al backend")
    
    print("\nüí° PR√ìXIMOS PASOS:")
    print("   1. Revisar los logs del chatbot en tiempo real")
    print("   2. Verificar que el chatbot est√© usando los endpoints correctos")
    print("   3. Comprobar que los datos se env√≠an en el formato correcto")

if __name__ == "__main__":
    test_chatbot_with_detailed_logging() 