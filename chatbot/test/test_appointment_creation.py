#!/usr/bin/env python3
"""
Script para probar la creaci√≥n de citas directamente
Simula exactamente los datos que enviar√≠a el chatbot
"""

import requests
import json
from datetime import datetime, timedelta

def test_appointment_creation():
    """Prueba la creaci√≥n de citas con datos simulados del chatbot"""
    
    backend_url = "http://localhost:3000"
    
    print("üîç PRUEBA DIRECTA DE CREACI√ìN DE CITAS")
    print("=" * 50)
    
    # Datos simulados que enviar√≠a el chatbot
    test_data = {
        "fullName": "Juan P√©rez L√≥pez",
        "age": 28,
        "phone": "+34 612 345 678",
        "email": "juan.perez@email.com",
        "consultationReason": "Problema con contrato de trabajo",
        "preferredDate": "2024-01-15T10:00:00Z",
        "consultationType": "Derecho Laboral"
    }
    
    print("üìã Datos que se enviar√°n:")
    for key, value in test_data.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    print(f"\nüîó Enviando a: {backend_url}/api/appointments/visitor")
    print("-" * 50)
    
    try:
        response = requests.post(
            f"{backend_url}/api/appointments/visitor",
            json=test_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"üìä Respuesta del backend:")
        print(f"   ‚Ä¢ Status Code: {response.status_code}")
        print(f"   ‚Ä¢ Headers: {dict(response.headers)}")
        print(f"   ‚Ä¢ Response: {response.text}")
        
        if response.status_code == 201:
            print("\n‚úÖ ¬°Cita creada exitosamente!")
            appointment = response.json()
            print(f"   ‚Ä¢ ID: {appointment.get('id')}")
            print(f"   ‚Ä¢ Estado: {appointment.get('status')}")
            print(f"   ‚Ä¢ Creada: {appointment.get('createdAt')}")
        else:
            print(f"\n‚ùå Error al crear cita")
            print(f"   ‚Ä¢ C√≥digo: {response.status_code}")
            print(f"   ‚Ä¢ Mensaje: {response.text}")
            
            # Intentar parsear el error si es JSON
            try:
                error_data = response.json()
                if 'message' in error_data:
                    print(f"   ‚Ä¢ Error espec√≠fico: {error_data['message']}")
            except:
                pass
                
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n: No se puede conectar al backend")
        print("   Verifica que el backend est√© ejecut√°ndose en el puerto 3000")
    except requests.exceptions.Timeout:
        print("‚ùå Error de timeout: El backend no respondi√≥ en tiempo")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
    
    print("\n" + "=" * 50)
    print("üîç Verificando esquema de datos requeridos...")
    
    # Verificar qu√© campos requiere el backend
    try:
        # Intentar obtener la documentaci√≥n de Swagger
        swagger_response = requests.get(f"{backend_url}/api/docs", timeout=5)
        if swagger_response.status_code == 200:
            print("‚úÖ Documentaci√≥n Swagger disponible")
            print("   Revisa http://localhost:3000/api/docs para ver el esquema exacto")
        else:
            print("‚ùå No se puede acceder a la documentaci√≥n")
    except Exception as e:
        print(f"‚ùå Error accediendo a documentaci√≥n: {e}")

if __name__ == "__main__":
    test_appointment_creation() 