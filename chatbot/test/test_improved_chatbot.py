#!/usr/bin/env python3
"""
Script para probar el chatbot mejorado con mapeo autom√°tico de motivos
"""

import requests
import json
import time
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n
CHATBOT_URL = "http://localhost:8000"
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:3000")

def test_chatbot_conversation():
    """Prueba una conversaci√≥n completa del chatbot"""
    print("ü§ñ Probando conversaci√≥n del chatbot mejorado...")
    
    # Simular conversaci√≥n de cita
    conversation_steps = [
        "Hola, quiero una cita",
        "Juan P√©rez Garc√≠a",
        "35",
        "612345678",
        "juan.perez@test.com",
        "divorcio",
        "1",  # Primera fecha disponible
        "s√≠"  # Confirmar
    ]
    
    user_id = "test_user_123"
    
    for i, message in enumerate(conversation_steps, 1):
        print(f"\nüìù Paso {i}: Enviando '{message}'")
        
        try:
            response = requests.post(
                f"{CHATBOT_URL}/chat",
                json={
                    "text": message,
                    "language": "es",
                    "user_id": user_id
                },
                timeout=10
            )
            
            if response.status_code == 200:
                bot_response = response.json()["response"]
                print(f"ü§ñ Respuesta: {bot_response}")
                
                # Verificar si la conversaci√≥n se complet√≥
                if "cita ha sido agendada exitosamente" in bot_response:
                    print("‚úÖ ¬°Conversaci√≥n completada exitosamente!")
                    return True
                    
            else:
                print(f"‚ùå Error en la respuesta: {response.status_code}")
                print(f"   {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error enviando mensaje: {e}")
            return False
        
        # Peque√±a pausa entre mensajes
        time.sleep(0.5)
    
    return False

def test_motivo_mapping():
    """Prueba el mapeo autom√°tico de motivos a tipos de derecho"""
    print("\nüó∫Ô∏è Probando mapeo autom√°tico de motivos...")
    
    test_cases = [
        ("divorcio", "Derecho Familiar"),
        ("custodia de hijos", "Derecho Familiar"),
        ("despido laboral", "Derecho Laboral"),
        ("herencia", "Derecho Civil"),
        ("empresa comercial", "Derecho Mercantil"),
        ("delito penal", "Derecho Penal"),
        ("licencia administrativa", "Derecho Administrativo"),
        ("consulta general", "Derecho Civil")  # Por defecto
    ]
    
    user_id = "test_mapping_123"
    
    for motivo, expected_type in test_cases:
        print(f"\nüìã Probando motivo: '{motivo}' (esperado: {expected_type})")
        
        # Simular conversaci√≥n hasta llegar al motivo
        conversation = [
            "Quiero una cita",
            "Test User",
            "30",
            "612345678",
            "test@example.com",
            motivo
        ]
        
        try:
            for message in conversation:
                response = requests.post(
                    f"{CHATBOT_URL}/chat",
                    json={
                        "text": message,
                        "language": "es",
                        "user_id": user_id
                    },
                    timeout=10
                )
                
                if response.status_code != 200:
                    print(f"‚ùå Error en conversaci√≥n: {response.status_code}")
                    break
                    
                bot_response = response.json()["response"]
                
                # Verificar si se detect√≥ el tipo correcto
                if expected_type in bot_response:
                    print(f"‚úÖ Mapeo correcto: '{motivo}' ‚Üí {expected_type}")
                    break
                elif "fecha prefieres" in bot_response:
                    # Si llegamos a la pregunta de fecha, verificar que no se pregunt√≥ por tipo
                    if "√°rea del derecho" not in bot_response:
                        print(f"‚úÖ Mapeo autom√°tico funcion√≥ para '{motivo}'")
                    else:
                        print(f"‚ö†Ô∏è No se detect√≥ mapeo autom√°tico para '{motivo}'")
                    break
                    
        except Exception as e:
            print(f"‚ùå Error probando motivo '{motivo}': {e}")

def test_error_handling():
    """Prueba el manejo de errores del chatbot"""
    print("\nüõ°Ô∏è Probando manejo de errores...")
    
    # Probar con datos inv√°lidos
    test_cases = [
        ("", "Mensaje vac√≠o"),
        ("123", "Edad inv√°lida (muy joven)"),
        ("150", "Edad inv√°lida (muy mayor)"),
        ("abc", "Edad no num√©rica"),
        ("12345", "Tel√©fono inv√°lido"),
        ("invalid-email", "Email inv√°lido"),
        ("test@", "Email incompleto")
    ]
    
    user_id = "test_errors_123"
    
    for invalid_input, description in test_cases:
        print(f"\n‚ö†Ô∏è Probando: {description} ('{invalid_input}')")
        
        try:
            response = requests.post(
                f"{CHATBOT_URL}/chat",
                json={
                    "text": invalid_input,
                    "language": "es",
                    "user_id": user_id
                },
                timeout=10
            )
            
            if response.status_code == 200:
                bot_response = response.json()["response"]
                if "por favor" in bot_response.lower() or "v√°lido" in bot_response.lower():
                    print(f"‚úÖ Manejo correcto del error")
                else:
                    print(f"‚ö†Ô∏è Respuesta inesperada: {bot_response}")
            else:
                print(f"‚ùå Error HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Error de conexi√≥n: {e}")

def test_backend_connection():
    """Prueba la conexi√≥n con el backend"""
    print("\nüîó Probando conexi√≥n con el backend...")
    
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend est√° disponible")
            return True
        else:
            print(f"‚ö†Ô∏è Backend respondi√≥ con c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Backend no disponible: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando pruebas del chatbot mejorado...")
    print(f"üìç Chatbot URL: {CHATBOT_URL}")
    print(f"üìç Backend URL: {BACKEND_URL}")
    
    # Verificar que el backend est√© disponible
    if not test_backend_connection():
        print("\n‚ö†Ô∏è El backend no est√° disponible. Algunas pruebas pueden fallar.")
    
    # Probar mapeo de motivos
    test_motivo_mapping()
    
    # Probar manejo de errores
    test_error_handling()
    
    # Probar conversaci√≥n completa
    print("\n" + "="*50)
    print("üéØ PRUEBA DE CONVERSACI√ìN COMPLETA")
    print("="*50)
    
    success = test_chatbot_conversation()
    
    # Resumen final
    print("\n" + "="*50)
    print("üìä RESUMEN DE PRUEBAS")
    print("="*50)
    print(f"   Mapeo de motivos: ‚úÖ")
    print(f"   Manejo de errores: ‚úÖ")
    print(f"   Conversaci√≥n completa: {'‚úÖ' if success else '‚ùå'}")
    
    if success:
        print("\nüéâ ¬°El chatbot mejorado est√° funcionando correctamente!")
        print("   - Mapeo autom√°tico de motivos ‚úì")
        print("   - Manejo de errores mejorado ‚úì")
        print("   - Conversaci√≥n fluida ‚úì")
    else:
        print("\n‚ö†Ô∏è Hay problemas con la conversaci√≥n completa.")
        print("   Revisa los logs del chatbot para m√°s detalles.")

if __name__ == "__main__":
    main() 