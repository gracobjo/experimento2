#!/usr/bin/env python3
"""
Script de prueba para el sistema de correos del chatbot
"""

import requests
import json
import os
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:3000")
CHATBOT_URL = os.getenv("CHATBOT_URL", "http://localhost:8000")
TEST_EMAIL = os.getenv("TEST_EMAIL", "test@example.com")

def test_chatbot_conversation():
    """Prueba una conversaci√≥n completa del chatbot para agendar una cita"""
    
    print("ü§ñ PRUEBA DEL CHATBOT - SISTEMA DE CORREOS")
    print("=" * 60)
    print()
    
    # Datos de prueba
    test_data = {
        "fullName": "Mar√≠a Garc√≠a L√≥pez",
        "age": 28,
        "phone": "+34 678 901 234",
        "email": TEST_EMAIL,
        "consultationReason": "Problema laboral con despido",
        "consultationType": "Derecho Laboral",
        "preferredDate": (datetime.now() + timedelta(days=5)).isoformat()
    }
    
    print("üìã Datos de prueba:")
    print(f"   ‚Ä¢ Nombre: {test_data['fullName']}")
    print(f"   ‚Ä¢ Email: {test_data['email']}")
    print(f"   ‚Ä¢ Motivo: {test_data['consultationReason']}")
    print(f"   ‚Ä¢ Tipo: {test_data['consultationType']}")
    print()
    
    # Simular conversaci√≥n del chatbot
    conversation_steps = [
        ("Hola, quiero agendar una cita", "Saludo inicial"),
        ("S√≠, quiero agendar una cita", "Confirmaci√≥n de inter√©s"),
        (test_data["fullName"], "Nombre completo"),
        (str(test_data["age"]), "Edad"),
        (test_data["phone"], "Tel√©fono"),
        (test_data["email"], "Email"),
        (test_data["consultationReason"], "Motivo de consulta"),
        (test_data["consultationType"], "Tipo de consulta"),
        ("1", "Selecci√≥n de fecha"),
        ("S√≠, est√° todo correcto", "Confirmaci√≥n final")
    ]
    
    print("üí¨ Simulando conversaci√≥n del chatbot...")
    print()
    
    user_id = f"test_user_{int(time.time())}"
    conversation_history = []
    
    for i, (message, step) in enumerate(conversation_steps, 1):
        print(f"{i:2d}. {step}: '{message}'")
        
        # Enviar mensaje al chatbot
        try:
            response = requests.post(
                f"{CHATBOT_URL}/chat",
                json={
                    "text": message,
                    "language": "es",
                    "user_id": user_id
                },
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                chatbot_response = response.json()
                print(f"    ü§ñ Chatbot: {chatbot_response['response'][:100]}...")
                
                # Verificar si la cita fue creada
                if "cita ha sido agendada exitosamente" in chatbot_response['response']:
                    print()
                    print("‚úÖ ¬°Cita agendada exitosamente!")
                    print()
                    print("üìß Verificando env√≠o de correos...")
                    print("   - Email de confirmaci√≥n al visitante")
                    print("   - Email de notificaci√≥n a administradores")
                    print()
                    print(f"üîç Revisa tu bandeja de entrada y spam:")
                    print(f"   Email: {TEST_EMAIL}")
                    print()
                    
                    # Verificar en la base de datos
                    verify_appointment_in_database()
                    return True
                    
            else:
                print(f"    ‚ùå Error: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print(f"    ‚ùå Error: No se puede conectar al chatbot en {CHATBOT_URL}")
            print("   Aseg√∫rate de que el chatbot est√© ejecut√°ndose")
            return False
        except Exception as e:
            print(f"    ‚ùå Error: {e}")
            return False
        
        time.sleep(1)  # Pausa entre mensajes
    
    print()
    print("‚ö†Ô∏è  La conversaci√≥n no result√≥ en una cita agendada")
    return False

def verify_appointment_in_database():
    """Verifica que la cita existe en la base de datos"""
    
    print("üóÑÔ∏è  Verificando cita en la base de datos...")
    
    try:
        # Obtener todas las citas de visitantes
        response = requests.get(
            f"{BACKEND_URL}/api/appointments/visitor",
            headers={"Authorization": "Bearer admin-token"},  # Token de admin para pruebas
            timeout=10
        )
        
        if response.status_code == 200:
            appointments = response.json()
            
            # Buscar la cita m√°s reciente con el email de prueba
            recent_appointments = [
                apt for apt in appointments 
                if apt.get('email') == TEST_EMAIL
            ]
            
            if recent_appointments:
                latest_appointment = max(recent_appointments, key=lambda x: x['createdAt'])
                print(f"‚úÖ Cita encontrada en la base de datos")
                print(f"   ID: {latest_appointment['id']}")
                print(f"   Estado: {latest_appointment['status']}")
                print(f"   Fecha: {latest_appointment['preferredDate']}")
                print(f"   Creada: {latest_appointment['createdAt']}")
            else:
                print("‚ö†Ô∏è  No se encontr√≥ la cita en la base de datos")
        else:
            print(f"‚ö†Ô∏è  Error verificando base de datos: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error verificando base de datos: {e}")

def test_backend_health():
    """Prueba la salud del backend"""
    
    print("üè• Verificando salud del backend...")
    
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend funcionando correctamente")
            return True
        else:
            print(f"‚ö†Ô∏è  Backend respondi√≥ con c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando al backend: {e}")
        return False

def test_chatbot_health():
    """Prueba la salud del chatbot"""
    
    print("ü§ñ Verificando salud del chatbot...")
    
    try:
        response = requests.get(f"{CHATBOT_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Chatbot funcionando correctamente")
            return True
        else:
            print(f"‚ö†Ô∏è  Chatbot respondi√≥ con c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando al chatbot: {e}")
        return False

def main():
    """Funci√≥n principal"""
    
    print("=" * 70)
    print("üß™ PRUEBA DEL SISTEMA DE CORREOS DEL CHATBOT")
    print("=" * 70)
    print()
    
    # Verificar servicios
    if not test_backend_health():
        print()
        print("‚ùå Backend no disponible. Inicia el backend primero:")
        print("   cd ../backend")
        print("   npm run start:dev")
        return
    
    print()
    
    if not test_chatbot_health():
        print()
        print("‚ùå Chatbot no disponible. Inicia el chatbot primero:")
        print("   python main_improved.py")
        return
    
    print()
    
    # Probar conversaci√≥n del chatbot
    success = test_chatbot_conversation()
    
    if success:
        print("=" * 70)
        print("‚úÖ PRUEBA COMPLETADA EXITOSAMENTE")
        print("=" * 70)
        print()
        print("üìã Resumen:")
        print("   ‚Ä¢ Conversaci√≥n del chatbot completada")
        print("   ‚Ä¢ Cita agendada exitosamente")
        print("   ‚Ä¢ Emails enviados autom√°ticamente")
        print()
        print("üìß Verifica que hayas recibido:")
        print("   1. Email de confirmaci√≥n al visitante")
        print("   2. Email de notificaci√≥n a administradores")
        print()
        print("üîç Si no recibes los correos:")
        print("   ‚Ä¢ Revisa la carpeta de spam")
        print("   ‚Ä¢ Verifica la configuraci√≥n de Gmail")
        print("   ‚Ä¢ Revisa los logs del backend")
        print()
        print("üéØ Pr√≥ximos pasos:")
        print("   ‚Ä¢ Confirma la cita desde el panel de administraci√≥n")
        print("   ‚Ä¢ Verifica que llegue el email de confirmaci√≥n final")
    else:
        print("=" * 70)
        print("‚ùå PRUEBA FALLIDA")
        print("=" * 70)
        print()
        print("üîß Soluci√≥n de problemas:")
        print("   1. Verifica que el backend est√© ejecut√°ndose")
        print("   2. Verifica que el chatbot est√© ejecut√°ndose")
        print("   3. Revisa la configuraci√≥n de correos")
        print("   4. Verifica las variables de entorno")
        print("   5. Revisa los logs del backend y chatbot")

if __name__ == "__main__":
    main() 