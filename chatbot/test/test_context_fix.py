#!/usr/bin/env python3
"""
Script para probar la correcci√≥n del contexto de conversaci√≥n
"""

import requests
import json
import time

def test_context_fix():
    """Prueba que el contexto de conversaci√≥n funcione correctamente"""
    
    chatbot_url = "http://localhost:8000"
    
    print("üß™ PRUEBA DE CORRECCI√ìN DE CONTEXTO")
    print("=" * 50)
    
    # Verificar que el chatbot est√© funcionando
    try:
        health_response = requests.get(f"{chatbot_url}/health", timeout=5)
        print(f"‚úÖ Chatbot salud: {health_response.status_code}")
    except Exception as e:
        print(f"‚ùå Error conectando al chatbot: {e}")
        print("   Ejecuta: python main_improved_fixed.py")
        return
    
    # Conversaci√≥n que reproduce el problema original
    conversation = [
        ("Hola", "Saludo inicial"),
        ("quer√≠a hablar con un abogado", "Solicitud de contacto"),
        ("laboral", "Menciona √°rea"),
        ("despido", "Menciona motivo"),
        ("si", "Respuesta afirmativa - DEBER√çA iniciar citas"),
        ("si", "Segunda respuesta afirmativa - DEBER√çA iniciar citas"),
        ("si", "Tercera respuesta afirmativa - DEBER√çA iniciar citas")
    ]
    
    print(f"\nüí¨ Probando correcci√≥n de contexto...")
    print("-" * 50)
    
    user_id = "test_context_fix_123"
    
    for i, (message, description) in enumerate(conversation, 1):
        print(f"\n{i}. {description}: '{message}'")
        
        try:
            response = requests.post(
                f"{chatbot_url}/chat",
                json={
                    "text": message,
                    "language": "es",
                    "user_id": user_id
                },
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                bot_response = result.get('response', 'Sin respuesta')
                print(f"   ü§ñ Respuesta: {bot_response[:100]}...")
                
                # Verificar si la correcci√≥n funciona
                if i in [5, 6, 7] and "nombre completo" in bot_response.lower():
                    print(f"   ‚úÖ CORRECCI√ìN FUNCIONA: Inicia flujo de citas correctamente")
                elif i in [5, 6, 7] and ("Para responder adecuadamente" in bot_response or "Tu pregunta es importante" in bot_response):
                    print(f"   ‚ùå PROBLEMA PERSISTE: Respuesta gen√©rica repetitiva")
                elif i in [5, 6, 7]:
                    print(f"   ‚ùì RESPUESTA INESPERADA: {bot_response[:50]}...")
                
            else:
                print(f"   ‚ùå Error HTTP: {response.status_code}")
                print(f"   üìÑ Respuesta: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")
        
        time.sleep(0.5)
    
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE LA CORRECCI√ìN")
    print("=" * 50)
    
    print("‚úÖ Si ves 'CORRECCI√ìN FUNCIONA' en los pasos 5, 6, 7:")
    print("   El problema est√° resuelto completamente")
    
    print("\n‚ùå Si ves 'PROBLEMA PERSISTE' en los pasos 5, 6, 7:")
    print("   Necesitamos revisar m√°s la l√≥gica de detecci√≥n")
    
    print("\nüí° La correcci√≥n implementada:")
    print("   ‚Ä¢ Mantiene historial de conversaci√≥n por usuario")
    print("   ‚Ä¢ Detecta contexto de citas en respuestas afirmativas")
    print("   ‚Ä¢ Inicia flujo de citas autom√°ticamente")

if __name__ == "__main__":
    test_context_fix() 