#!/usr/bin/env python3
"""
Script de prueba para el sistema de correos de confirmaci√≥n de citas
"""

import requests
import json
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:3000")
TEST_EMAIL = os.getenv("TEST_EMAIL", "test@example.com")

def test_appointment_creation():
    """Prueba la creaci√≥n de una cita y el env√≠o de correos"""
    
    # Datos de prueba para la cita
    appointment_data = {
        "fullName": "Juan P√©rez Garc√≠a",
        "age": 35,
        "phone": "+34 612 345 678",
        "email": TEST_EMAIL,
        "consultationReason": "Divorcio y custodia de hijos",
        "preferredDate": (datetime.now() + timedelta(days=7)).isoformat(),
        "alternativeDate": (datetime.now() + timedelta(days=10)).isoformat(),
        "consultationType": "Derecho Familiar",
        "notes": "Cliente nuevo, primera consulta",
        "location": "Oficina principal"
    }
    
    print("üß™ Iniciando prueba del sistema de correos...")
    print(f"üìß Email de prueba: {TEST_EMAIL}")
    print(f"üîó Backend URL: {BACKEND_URL}")
    print()
    
    try:
        # Crear la cita
        print("1Ô∏è‚É£ Creando cita de visitante...")
        response = requests.post(
            f"{BACKEND_URL}/api/appointments/visitor",
            json=appointment_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 201:
            appointment = response.json()
            print(f"‚úÖ Cita creada exitosamente")
            print(f"   ID: {appointment['id']}")
            print(f"   Estado: {appointment['status']}")
            print(f"   Fecha: {appointment['preferredDate']}")
            print()
            
            # Verificar que la cita existe en la base de datos
            print("2Ô∏è‚É£ Verificando cita en la base de datos...")
            get_response = requests.get(
                f"{BACKEND_URL}/api/appointments/visitor/{appointment['id']}",
                headers={"Authorization": "Bearer admin-token"},  # Token de admin para pruebas
                timeout=10
            )
            
            if get_response.status_code == 200:
                print("‚úÖ Cita encontrada en la base de datos")
            else:
                print(f"‚ö†Ô∏è  No se pudo verificar la cita: {get_response.status_code}")
            
            print()
            print("üìß Verificando env√≠o de correos...")
            print("   - Email de confirmaci√≥n al visitante")
            print("   - Email de notificaci√≥n a administradores")
            print()
            print("üîç Revisa tu bandeja de entrada y spam para los correos")
            print(f"   Email: {TEST_EMAIL}")
            print()
            
            return appointment
            
        else:
            print(f"‚ùå Error creando cita: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return None
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Error: No se puede conectar al backend")
        print("   Aseg√∫rate de que el backend est√© ejecut√°ndose en:", BACKEND_URL)
        return None
    except requests.exceptions.Timeout:
        print("‚ùå Error: Timeout al conectar con el backend")
        return None
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return None

def test_email_configuration():
    """Prueba la configuraci√≥n del sistema de correos"""
    
    print("üîß Verificando configuraci√≥n de correos...")
    
    # Verificar variables de entorno
    email_user = os.getenv("EMAIL_USER")
    email_password = os.getenv("EMAIL_PASSWORD")
    admin_email = os.getenv("ADMIN_EMAIL")
    
    print(f"   EMAIL_USER: {'‚úÖ Configurado' if email_user else '‚ùå No configurado'}")
    print(f"   EMAIL_PASSWORD: {'‚úÖ Configurado' if email_password else '‚ùå No configurado'}")
    print(f"   ADMIN_EMAIL: {'‚úÖ Configurado' if admin_email else '‚ùå No configurado'}")
    
    if not all([email_user, email_password, admin_email]):
        print()
        print("‚ö†Ô∏è  Configuraci√≥n incompleta. Para configurar:")
        print("   1. Copia experimento/backend/env.example a experimento/backend/.env")
        print("   2. Configura EMAIL_USER, EMAIL_PASSWORD y ADMIN_EMAIL")
        print("   3. Para Gmail, usa una contrase√±a de aplicaci√≥n")
        return False
    
    print("‚úÖ Configuraci√≥n de correos completa")
    return True

def test_backend_health():
    """Prueba la salud del backend"""
    
    print("üè• Verificando salud del backend...")
    
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend funcionando correctamente")
            return True
        else:
            print(f"‚ö†Ô∏è  Backend respondi√≥ con c√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error conectando al backend: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    
    print("=" * 60)
    print("üß™ PRUEBA DEL SISTEMA DE CORREOS DE CONFIRMACI√ìN")
    print("=" * 60)
    print()
    
    # Verificar configuraci√≥n
    if not test_email_configuration():
        print()
        print("‚ùå Configuraci√≥n incompleta. No se pueden ejecutar las pruebas.")
        return
    
    print()
    
    # Verificar salud del backend
    if not test_backend_health():
        print()
        print("‚ùå Backend no disponible. Inicia el backend primero:")
        print("   cd experimento/backend")
        print("   npm run start:dev")
        return
    
    print()
    
    # Probar creaci√≥n de cita
    appointment = test_appointment_creation()
    
    if appointment:
        print("=" * 60)
        print("‚úÖ PRUEBA COMPLETADA EXITOSAMENTE")
        print("=" * 60)
        print()
        print("üìã Resumen:")
        print(f"   ‚Ä¢ Cita creada: {appointment['id']}")
        print(f"   ‚Ä¢ Visitante: {appointment['fullName']}")
        print(f"   ‚Ä¢ Email: {appointment['email']}")
        print(f"   ‚Ä¢ Estado: {appointment['status']}")
        print()
        print("üìß Verifica que hayas recibido:")
        print("   1. Email de confirmaci√≥n al visitante")
        print("   2. Email de notificaci√≥n a administradores")
        print()
        print("üîç Si no recibes los correos:")
        print("   ‚Ä¢ Revisa la carpeta de spam")
        print("   ‚Ä¢ Verifica la configuraci√≥n de Gmail")
        print("   ‚Ä¢ Revisa los logs del backend")
    else:
        print("=" * 60)
        print("‚ùå PRUEBA FALLIDA")
        print("=" * 60)
        print()
        print("üîß Soluci√≥n de problemas:")
        print("   1. Verifica que el backend est√© ejecut√°ndose")
        print("   2. Revisa la configuraci√≥n de correos")
        print("   3. Verifica las variables de entorno")
        print("   4. Revisa los logs del backend")

if __name__ == "__main__":
    main() 