def test_chatbot_menu_format():
    """Test para verificar que el men√∫ en chatbot/main_improved_fixed.py tiene el formato correcto"""
    
    print("üß™ **Test: Formato del Men√∫ en chatbot/main_improved_fixed.py**")
    print("=" * 70)
    
    # Leer el archivo del chatbot
    with open('chatbot/main_improved_fixed.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Buscar el men√∫ en el archivo
    menu_start = content.find('üìã **Opciones disponibles:**')
    if menu_start == -1:
        print("‚ùå No se encontr√≥ el men√∫ en el archivo")
        return False
    
    # Extraer el men√∫ completo
    menu_end = content.find('Responde con el n√∫mero de la opci√≥n que prefieras', menu_start)
    if menu_end == -1:
        print("‚ùå No se pudo encontrar el final del men√∫")
        return False
    
    menu_text = content[menu_start:menu_end + 50]  # Incluir el texto final
    
    print("üìã **Men√∫ encontrado en chatbot/main_improved_fixed.py:**")
    print("-" * 50)
    print(menu_text)
    print("-" * 50)
    
    # Verificar que el formato est√° correcto
    expected_format_elements = [
        "üìã **Opciones disponibles:**",
        "1Ô∏è‚É£ **Agendar una cita**",
        "   Para consulta personalizada con nuestros abogados",
        "2Ô∏è‚É£ **Informaci√≥n general**",
        "   Sobre servicios, honorarios, horarios",
        "3Ô∏è‚É£ **Contacto directo**",
        "   Tel√©fono, email, ubicaci√≥n",
        "4Ô∏è‚É£ **Otro asunto**",
        "   Especifica tu consulta"
    ]
    
    missing_elements = []
    for element in expected_format_elements:
        if element not in menu_text:
            missing_elements.append(element)
    
    if missing_elements:
        print(f"‚ùå Elementos faltantes en el formato:")
        for element in missing_elements:
            print(f"   - {element}")
        return False
    else:
        print("‚úÖ Todos los elementos del formato est√°n presentes")
    
    # Verificar que las opciones est√°n en l√≠neas separadas
    lines = menu_text.split('\n')
    option_lines = []
    description_lines = []
    
    for line in lines:
        if '1Ô∏è‚É£' in line or '2Ô∏è‚É£' in line or '3Ô∏è‚É£' in line or '4Ô∏è‚É£' in line:
            option_lines.append(line.strip())
        elif line.strip().startswith('   ') and any(word in line for word in ['Para consulta', 'Sobre servicios', 'Tel√©fono', 'Especifica']):
            description_lines.append(line.strip())
    
    print(f"\nüìä **An√°lisis del formato:**")
    print(f"   Opciones encontradas: {len(option_lines)}")
    print(f"   Descripciones encontradas: {len(description_lines)}")
    
    for i, (option, desc) in enumerate(zip(option_lines, description_lines), 1):
        print(f"   Opci√≥n {i}: {option}")
        print(f"   Descripci√≥n {i}: {desc}")
        print()
    
    # Verificar que hay espacios entre las opciones
    if "   " in menu_text:
        print("‚úÖ Las descripciones tienen indentaci√≥n correcta")
    else:
        print("‚ö†Ô∏è  No se detect√≥ indentaci√≥n en las descripciones")
    
    # Verificar que hay l√≠neas en blanco entre opciones
    if "\n\n" in menu_text:
        print("‚úÖ Hay separaci√≥n entre las opciones")
    else:
        print("‚ö†Ô∏è  No se detect√≥ separaci√≥n entre opciones")
    
    return True

if __name__ == "__main__":
    success = test_chatbot_menu_format()
    
    if success:
        print("\nüéâ **Test exitoso!**")
        print("‚úÖ El formato del men√∫ est√° correctamente implementado en chatbot/main_improved_fixed.py")
        print("üí° Ahora reinicia el servidor del chatbot para ver los cambios")
    else:
        print("\n‚ùå **Test fall√≥**")
        print("‚ö†Ô∏è  Revisar la implementaci√≥n del formato del men√∫") 