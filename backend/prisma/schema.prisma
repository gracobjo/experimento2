generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                  @id @default(uuid())
  name                        String
  email                       String                  @unique
  password                    String
  role                        Role                    @default(CLIENTE)
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  resetPasswordExpires        DateTime?
  resetPasswordToken          String?
  appointmentsAsLawyer        Appointment[]
  blacklistedTokens           BlacklistedToken[]
  client                      Client?
  documents                   Document[]              @relation("UserDocuments")
  expedientesAsLawyer         Expediente[]            @relation("LawyerExpedientes")
  facturasEmitidas            Invoice[]               @relation("EmisorFacturas")
  facturasRecibidas           Invoice[]               @relation("ReceptorFacturas")
  invoiceAuditHistory         InvoiceAuditHistory[]
  lawyer                      Lawyer?
  notes                       Note[]                  @relation("UserNotes")
  refreshTokens               RefreshToken[]
  receivedMessages            ChatMessage[]           @relation("ReceivedMessages")
  sentMessages                ChatMessage[]           @relation("SentMessages")
  chatbotConversations        ChatbotConversation[]
  emailLogs                   EmailLog[]
  layouts                     Layout[]
  assignedTasks               Task[]                  @relation("AssignedTasks")
  createdTasks                Task[]                  @relation("CreatedTasks")
  teleassistanceMessages      TeleassistanceMessage[]
  assistantSessions           TeleassistanceSession[] @relation("AssistantTeleassistanceSessions")
  teleassistanceSessions      TeleassistanceSession[] @relation("UserTeleassistanceSessions")
  assignedVisitorAppointments VisitorAppointment[]    @relation("AssignedVisitorAppointments")
}

model Client {
  id              String            @id @default(uuid())
  userId          String            @unique
  dni             String            @unique
  phone           String?
  address         String?
  createdAt       DateTime          @default(now())
  appointments    Appointment[]
  user            User              @relation(fields: [userId], references: [id])
  expedientes     Expediente[]
  provisionFondos ProvisionFondos[]
  tasks           Task[]
}

model Lawyer {
  id        String   @id @default(uuid())
  userId    String   @unique
  colegiado String   @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Expediente {
  id              String            @id @default(uuid())
  title           String
  description     String?
  status          Status
  clientId        String
  lawyerId        String
  createdAt       DateTime          @default(now())
  documents       Document[]
  client          Client            @relation(fields: [clientId], references: [id])
  lawyer          User              @relation("LawyerExpedientes", fields: [lawyerId], references: [id])
  facturas        Invoice[]
  notes           Note[]
  provisionFondos ProvisionFondos[]
  tasks           Task[]
}

model Document {
  id             String     @id @default(uuid())
  expedienteId   String
  filename       String
  fileUrl        String?
  uploadedAt     DateTime   @default(now())
  description    String?
  fileSize       Int
  mimeType       String
  originalName   String
  uploadedBy     String
  metadata       Json?
  fileData       Bytes?
  expediente     Expediente @relation(fields: [expedienteId], references: [id])
  uploadedByUser User       @relation("UserDocuments", fields: [uploadedBy], references: [id])
}

model Appointment {
  id       String   @id @default(uuid())
  clientId String
  lawyerId String
  date     DateTime
  location String?
  notes    String?
  status   String   @default("PENDIENTE")
  client   Client   @relation(fields: [clientId], references: [id])
  lawyer   User     @relation(fields: [lawyerId], references: [id])
}

model VisitorAppointment {
  id                   String                @id @default(uuid())
  fullName             String
  age                  Int
  phone                String
  email                String
  consultationReason   String
  preferredDate        DateTime
  alternativeDate      DateTime?
  consultationType     String
  notes                String?
  location             String?
  status               String                @default("PENDIENTE")
  assignedLawyerId     String?
  confirmedDate        DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  chatbotConversations ChatbotConversation[]
  emailLogs            EmailLog[]
  assignedLawyer       User?                 @relation("AssignedVisitorAppointments", fields: [assignedLawyerId], references: [id])

  @@map("visitor_appointments")
}

model ChatMessage {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model ChatBotMessage {
  id        String   @id @default(uuid())
  sender    Sender
  sessionId String
  message   String
  createdAt DateTime @default(now())

  @@map("chat_bot_messages")
}

model ChatbotConversation {
  id               String                 @id @default(uuid())
  sessionId        String                 @unique
  userId           String?
  userEmail        String?
  userPhone        String?
  conversationType String
  status           String                 @default("ACTIVE")
  startedAt        DateTime               @default(now())
  completedAt      DateTime?
  totalMessages    Int                    @default(0)
  userMessages     Int                    @default(0)
  botMessages      Int                    @default(0)
  lastActivity     DateTime               @updatedAt
  language         String                 @default("es")
  userAgent        String?
  ipAddress        String?
  metadata         Json?
  appointmentId    String?
  appointment      VisitorAppointment?    @relation(fields: [appointmentId], references: [id])
  user             User?                  @relation(fields: [userId], references: [id])
  messages         ChatbotMessageDetail[]

  @@map("chatbot_conversations")
}

model ChatbotMessageDetail {
  id             String              @id @default(uuid())
  conversationId String
  messageType    String
  content        String
  intent         String?
  confidence     Float?
  entities       Json?
  sentiment      String?
  timestamp      DateTime            @default(now())
  processingTime Int?
  error          String?
  conversation   ChatbotConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chatbot_message_details")
}

model EmailLog {
  id            String              @id @default(uuid())
  recipient     String
  subject       String
  template      String
  status        String
  sentAt        DateTime            @default(now())
  deliveredAt   DateTime?
  failedAt      DateTime?
  error         String?
  retryCount    Int                 @default(0)
  maxRetries    Int                 @default(3)
  emailProvider String?
  messageId     String?
  metadata      Json?
  appointmentId String?
  userId        String?
  appointment   VisitorAppointment? @relation(fields: [appointmentId], references: [id])
  user          User?               @relation(fields: [userId], references: [id])

  @@map("email_logs")
}

model ChatbotAnalytics {
  id                             String   @id @default(uuid())
  date                           DateTime @default(now())
  totalConversations             Int      @default(0)
  completedConversations         Int      @default(0)
  abandonedConversations         Int      @default(0)
  totalMessages                  Int      @default(0)
  averageMessagesPerConversation Float    @default(0)
  appointmentBookings            Int      @default(0)
  conversionRate                 Float    @default(0)
  averageResponseTime            Float    @default(0)
  topIntents                     Json?
  topEntities                    Json?
  userSatisfaction               Float?
  errorRate                      Float    @default(0)
  languageDistribution           Json?
  deviceDistribution             Json?

  @@map("chatbot_analytics")
}

model Task {
  id             String      @id @default(uuid())
  title          String
  description    String?
  dueDate        DateTime?
  priority       String      @default("MEDIA")
  status         String      @default("PENDIENTE")
  expedienteId   String?
  clientId       String?
  assignedTo     String?
  createdBy      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  assignedToUser User?       @relation("AssignedTasks", fields: [assignedTo], references: [id])
  client         Client?     @relation(fields: [clientId], references: [id])
  createdByUser  User        @relation("CreatedTasks", fields: [createdBy], references: [id], onDelete: Cascade)
  expediente     Expediente? @relation(fields: [expedienteId], references: [id])

  @@map("tasks")
}

model Parametro {
  id        String   @id @default(uuid())
  clave     String   @unique
  valor     String
  etiqueta  String
  tipo      String
  updatedAt DateTime @updatedAt
}

model Invoice {
  id                     String                @id @default(uuid())
  numeroFactura          String                @unique
  fechaFactura           DateTime
  tipoFactura            String
  emisorId               String
  receptorId             String
  expedienteId           String?
  importeTotal           Float
  baseImponible          Float
  cuotaIVA               Float
  tipoIVA                Float
  regimenIvaEmisor       String
  claveOperacion         String
  metodoPago             String
  fechaOperacion         DateTime
  xml                    String?
  xmlFirmado             String?
  estado                 String                @default("borrador")
  selloTiempo            DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  motivoAnulacion        String?
  aplicarIVA             Boolean               @default(true)
  descuento              Float?
  retencion              Float?
  externalId             String?
  fechaEnvio             DateTime?
  sistemaEnvio           String?
  paymentDate            DateTime?
  facturaOriginalId      String?
  motivoRectificacion    String?
  tipoRectificacion      String?
  tipoImpuesto           String?
  emisor                 User                  @relation("EmisorFacturas", fields: [emisorId], references: [id])
  expediente             Expediente?           @relation(fields: [expedienteId], references: [id])
  facturaOriginal        Invoice?              @relation("FacturaRectificativa", fields: [facturaOriginalId], references: [id])
  facturasRectificativas Invoice[]             @relation("FacturaRectificativa")
  receptor               User                  @relation("ReceptorFacturas", fields: [receptorId], references: [id])
  auditHistory           InvoiceAuditHistory[]
  items                  InvoiceItem[]
  provisionFondos        ProvisionFondos[]
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  total       Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
}

model ProvisionFondos {
  id           String      @id @default(uuid())
  clientId     String
  expedienteId String?
  invoiceId    String?
  amount       Float
  date         DateTime    @default(now())
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  client       Client      @relation(fields: [clientId], references: [id])
  expediente   Expediente? @relation(fields: [expedienteId], references: [id])
  invoice      Invoice?    @relation(fields: [invoiceId], references: [id])
}

model Layout {
  id            String   @id @default(uuid())
  name          String
  slug          String   @unique
  components    Json
  version       Int      @default(1)
  isActive      Boolean  @default(false)
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdByUser User     @relation(fields: [createdBy], references: [id])

  @@map("layouts")
}

model Contact {
  id        String   @id @default(uuid())
  nombre    String
  email     String
  telefono  String?
  asunto    String
  mensaje   String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id           String     @id @default(uuid())
  expedienteId String
  title        String
  content      String
  authorId     String
  isPrivate    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  author       User       @relation("UserNotes", fields: [authorId], references: [id], onDelete: Cascade)
  expediente   Expediente @relation(fields: [expedienteId], references: [id], onDelete: Cascade)
}

model MenuConfig {
  id          String     @id @default(uuid())
  name        String
  role        Role
  orientation String     @default("horizontal")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items       MenuItem[]
}

model MenuItem {
  id           String     @id @default(uuid())
  menuConfigId String
  label        String
  url          String
  icon         String?
  order        Int        @default(0)
  isVisible    Boolean    @default(true)
  isExternal   Boolean    @default(false)
  parentId     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  menuConfig   MenuConfig @relation(fields: [menuConfigId], references: [id], onDelete: Cascade)
  parent       MenuItem?  @relation("MenuItemParent", fields: [parentId], references: [id])
  children     MenuItem[] @relation("MenuItemParent")
}

model SiteConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeleassistanceSession {
  id          String                  @id @default(cuid())
  userId      String
  assistantId String
  issueType   String
  description String
  remoteTool  String?
  status      String                  @default("PENDING")
  sessionCode String                  @unique
  resolution  String?
  notes       String?
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  messages    TeleassistanceMessage[]
  assistant   User                    @relation("AssistantTeleassistanceSessions", fields: [assistantId], references: [id])
  user        User                    @relation("UserTeleassistanceSessions", fields: [userId], references: [id])

  @@map("teleassistance_sessions")
}

model TeleassistanceMessage {
  id          String                @id @default(cuid())
  sessionId   String
  senderId    String
  content     String
  messageType String                @default("TEXT")
  createdAt   DateTime              @default(now())
  sender      User                  @relation(fields: [senderId], references: [id])
  session     TeleassistanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("teleassistance_messages")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model BlacklistedToken {
  id            String   @id @default(uuid())
  tokenHash     String   @unique
  userId        String
  expiresAt     DateTime
  blacklistedAt DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
}

model InvoiceAuditHistory {
  id          String   @id @default(uuid())
  invoiceId   String
  userId      String
  action      String
  fieldName   String?
  oldValue    String?
  newValue    String?
  description String
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@index([invoiceId])
  @@index([userId])
  @@index([createdAt])
}

enum Role {
  ADMIN
  ABOGADO
  CLIENTE
}

enum Status {
  ABIERTO
  EN_PROCESO
  CERRADO
}

enum InvoiceStatus {
  BORRADOR
  EMITIDA
  ENVIADA
  NOTIFICADA
  ACEPTADA
  RECHAZADA
  ANULADA
}

enum Sender {
  USER
  BOT
}
