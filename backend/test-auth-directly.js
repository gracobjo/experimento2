const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function testAuthDirectly() {
  try {
    console.log('üîç PROBANDO AUTENTICACI√ìN DIRECTAMENTE EN LA BASE DE DATOS\n');
    console.log('=' .repeat(60));

    // 1. Buscar el usuario de prueba
    console.log('\n1Ô∏è‚É£ Buscando usuario de prueba...');
    const testUser = await prisma.user.findUnique({
      where: {
        email: 'test@example.com'
      }
    });

    if (!testUser) {
      console.log('‚ùå Usuario de prueba no encontrado');
      return;
    }

    console.log('‚úÖ Usuario encontrado:');
    console.log(`   ID: ${testUser.id}`);
    console.log(`   Nombre: ${testUser.name}`);
    console.log(`   Email: ${testUser.email}`);
    console.log(`   Rol: ${testUser.role}`);
    console.log(`   Contrase√±a hash: ${testUser.password.substring(0, 20)}...`);

    // 2. Probar la contrase√±a
    console.log('\n2Ô∏è‚É£ Probando contrase√±a...');
    const password = 'test123';
    const isValid = await bcrypt.compare(password, testUser.password);
    console.log(`   Contrase√±a "${password}": ${isValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);

    if (!isValid) {
      console.log('‚ùå La contrase√±a no es v√°lida en la base de datos');
      return;
    }

    // 3. Simular el proceso de validaci√≥n del AuthService
    console.log('\n3Ô∏è‚É£ Simulando validaci√≥n del AuthService...');
    
    // Buscar usuario por email (como hace validateUser)
    const userByEmail = await prisma.user.findUnique({ 
      where: { email: 'test@example.com' } 
    });
    
    if (!userByEmail) {
      console.log('‚ùå Usuario no encontrado por email');
      return;
    }

    console.log('‚úÖ Usuario encontrado por email');
    console.log(`   ID: ${userByEmail.id}`);
    console.log(`   Email: ${userByEmail.email}`);

    // Comparar contrase√±a (como hace validateUser)
    const passwordValid = await bcrypt.compare(password, userByEmail.password);
    console.log(`   Contrase√±a v√°lida: ${passwordValid ? '‚úÖ S√ç' : '‚ùå NO'}`);

    if (passwordValid) {
      // Simular la respuesta exitosa
      const { password: _, ...userWithoutPassword } = userByEmail;
      console.log('\n‚úÖ Usuario validado exitosamente:');
      console.log(JSON.stringify(userWithoutPassword, null, 2));
    } else {
      console.log('‚ùå La contrase√±a no coincide en la validaci√≥n');
    }

    // 4. Verificar si hay alg√∫n problema con el email
    console.log('\n4Ô∏è‚É£ Verificando formato del email...');
    console.log(`   Email original: "${testUser.email}"`);
    console.log(`   Email trimmed: "${testUser.email.trim()}"`);
    console.log(`   ¬øSon iguales?: ${testUser.email === testUser.email.trim() ? '‚úÖ S√ç' : '‚ùå NO'}`);

    // 5. Probar b√∫squeda con diferentes variaciones del email
    console.log('\n5Ô∏è‚É£ Probando b√∫squedas con diferentes variaciones...');
    
    const emailVariations = [
      'test@example.com',
      ' test@example.com',
      'test@example.com ',
      ' test@example.com ',
      'TEST@EXAMPLE.COM',
      'Test@Example.com'
    ];

    for (const emailVar of emailVariations) {
      const user = await prisma.user.findUnique({ where: { email: emailVar } });
      console.log(`   "${emailVar}": ${user ? '‚úÖ Encontrado' : '‚ùå No encontrado'}`);
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testAuthDirectly();
