import requests
import json
import time

def test_session_cleanup():
    """Probar la limpieza de sesiones y evitar saltos en el flujo"""
    base_url = "http://localhost:8000"
    
    print("üßπ Probando limpieza de sesiones y flujo correcto...\n")
    
    # Test 1: Verificar que no hay datos de sesiones anteriores
    print("1Ô∏è‚É£ Verificando estado inicial...")
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            data = response.json()
            active_sessions = data.get('active_sessions', 0)
            print(f"   üìä Sesiones activas: {active_sessions}")
            if active_sessions == 0:
                print("   ‚úÖ No hay sesiones activas (correcto)")
            else:
                print("   ‚ö†Ô∏è  Hay sesiones activas al inicio")
        else:
            print(f"   ‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    # Test 2: Simular el flujo problem√°tico
    print("\n2Ô∏è‚É£ Probando flujo problem√°tico...")
    user_id = "test_session_user"
    
    problematic_flow = [
        ("hola", "Saludo inicial"),
        ("jj", "Respuesta corta que deber√≠a mostrar men√∫"),
        ("He seleccionado: Mi√©rcoles 23 de Julio a las 16:00", "Texto que simula selecci√≥n de fecha")
    ]
    
    for i, (text, description) in enumerate(problematic_flow, 1):
        print(f"\n   Paso {i}: '{text}' - {description}")
        try:
            response = requests.post(f"{base_url}/chat", json={
                "text": text,
                "language": "es",
                "user_id": user_id
            })
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data['response']
                
                if i == 1:  # Saludo inicial
                    if "üìã" in bot_response and "Opciones disponibles" in bot_response:
                        print(f"   ‚úÖ Muestra men√∫ principal")
                    else:
                        print(f"   ‚ùå No muestra men√∫ principal")
                
                elif i == 2:  # Respuesta corta
                    if "Para ayudarte mejor" in bot_response and "üìã" in bot_response:
                        print(f"   ‚úÖ Muestra men√∫ (no inicia flujo de citas)")
                    elif "nombre completo" in bot_response:
                        print(f"   ‚ùå ERROR: Inici√≥ flujo de citas sin validaci√≥n")
                    else:
                        print(f"   ‚ö†Ô∏è  Respuesta inesperada")
                
                elif i == 3:  # Texto de fecha
                    if "Para agendar una cita, primero necesito" in bot_response:
                        print(f"   ‚úÖ Detecta texto de fecha y pide datos primero")
                    elif "nombre completo" in bot_response:
                        print(f"   ‚ùå ERROR: Salt√≥ al flujo de citas sin validaci√≥n")
                    else:
                        print(f"   ‚ö†Ô∏è  Respuesta inesperada")
                
                print(f"   üí¨ Respuesta: {bot_response[:100]}...")
            else:
                print(f"   ‚ùå Error: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    # Test 3: Verificar que no hay conversaci√≥n activa despu√©s del flujo
    print("\n3Ô∏è‚É£ Verificando estado despu√©s del flujo...")
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            data = response.json()
            active_sessions = data.get('active_sessions', 0)
            print(f"   üìä Sesiones activas despu√©s del flujo: {active_sessions}")
        else:
            print(f"   ‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")

def test_proper_appointment_flow():
    """Probar el flujo correcto de citas"""
    base_url = "http://localhost:8000"
    
    print("\n" + "="*60)
    print("üìÖ Probando flujo correcto de citas...\n")
    
    user_id = "test_proper_flow_user"
    
    proper_flow = [
        ("1", "Selecci√≥n de opci√≥n 1 - Agendar cita"),
        ("Juan P√©rez L√≥pez", "Nombre completo v√°lido"),
        ("25", "Edad v√°lida"),
        ("612345678", "Tel√©fono v√°lido"),
        ("juan@email.com", "Email v√°lido"),
        ("Problema laboral", "Motivo v√°lido"),
        ("4", "Selecci√≥n de fecha"),
        ("s√≠", "Confirmaci√≥n")
    ]
    
    for i, (text, description) in enumerate(proper_flow, 1):
        print(f"{i}Ô∏è‚É£ '{text}' - {description}")
        try:
            response = requests.post(f"{base_url}/chat", json={
                "text": text,
                "language": "es",
                "user_id": user_id
            })
            
            if response.status_code == 200:
                data = response.json()
                bot_response = data['response']
                
                if i == 1:  # Opci√≥n 1
                    if "nombre completo" in bot_response:
                        print(f"   ‚úÖ Inicia flujo de citas correctamente")
                    else:
                        print(f"   ‚ùå No inicia flujo de citas")
                
                elif i == 2:  # Nombre
                    if "edad" in bot_response:
                        print(f"   ‚úÖ Acepta nombre y pide edad")
                    else:
                        print(f"   ‚ùå No acepta nombre")
                
                elif i == 3:  # Edad
                    if "tel√©fono" in bot_response:
                        print(f"   ‚úÖ Acepta edad y pide tel√©fono")
                    else:
                        print(f"   ‚ùå No acepta edad")
                
                elif i == 4:  # Tel√©fono
                    if "correo electr√≥nico" in bot_response:
                        print(f"   ‚úÖ Acepta tel√©fono y pide email")
                    else:
                        print(f"   ‚ùå No acepta tel√©fono")
                
                elif i == 5:  # Email
                    if "motivo" in bot_response:
                        print(f"   ‚úÖ Acepta email y pide motivo")
                    else:
                        print(f"   ‚ùå No acepta email")
                
                elif i == 6:  # Motivo
                    if "fecha" in bot_response and "Opciones disponibles" in bot_response:
                        print(f"   ‚úÖ Acepta motivo y muestra fechas")
                    else:
                        print(f"   ‚ùå No acepta motivo")
                
                elif i == 7:  # Fecha
                    if "confirmas" in bot_response:
                        print(f"   ‚úÖ Acepta fecha y pide confirmaci√≥n")
                    else:
                        print(f"   ‚ùå No acepta fecha")
                
                elif i == 8:  # Confirmaci√≥n
                    if "confirmada" in bot_response and "Juan P√©rez L√≥pez" in bot_response:
                        print(f"   ‚úÖ Confirma cita correctamente")
                    else:
                        print(f"   ‚ùå No confirma cita")
                
                print(f"   üí¨ Respuesta: {bot_response[:100]}...")
            else:
                print(f"   ‚ùå Error: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")

def test_session_isolation():
    """Probar que las sesiones est√°n aisladas"""
    base_url = "http://localhost:8000"
    
    print("\n" + "="*60)
    print("üîí Probando aislamiento de sesiones...\n")
    
    # Usuario 1 inicia flujo de citas
    user1 = "test_user_1"
    print("üë§ Usuario 1 inicia flujo de citas...")
    
    try:
        response = requests.post(f"{base_url}/chat", json={
            "text": "1",
            "language": "es",
            "user_id": user1
        })
        
        if response.status_code == 200:
            data = response.json()
            bot_response = data['response']
            if "nombre completo" in bot_response:
                print("   ‚úÖ Usuario 1 inici√≥ flujo de citas")
            else:
                print("   ‚ùå Usuario 1 no inici√≥ flujo")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Usuario 2 saluda (no deber√≠a afectar a usuario 1)
    user2 = "test_user_2"
    print("\nüë§ Usuario 2 saluda...")
    
    try:
        response = requests.post(f"{base_url}/chat", json={
            "text": "hola",
            "language": "es",
            "user_id": user2
        })
        
        if response.status_code == 200:
            data = response.json()
            bot_response = data['response']
            if "üìã" in bot_response and "Opciones disponibles" in bot_response:
                print("   ‚úÖ Usuario 2 recibe men√∫ principal")
            else:
                print("   ‚ùå Usuario 2 no recibe men√∫")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Usuario 1 contin√∫a su flujo
    print("\nüë§ Usuario 1 contin√∫a su flujo...")
    
    try:
        response = requests.post(f"{base_url}/chat", json={
            "text": "Mar√≠a Garc√≠a L√≥pez",
            "language": "es",
            "user_id": user1
        })
        
        if response.status_code == 200:
            data = response.json()
            bot_response = data['response']
            if "edad" in bot_response:
                print("   ‚úÖ Usuario 1 puede continuar su flujo")
            else:
                print("   ‚ùå Usuario 1 no puede continuar")
        else:
            print(f"   ‚ùå Error: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")

if __name__ == "__main__":
    test_session_cleanup()
    test_proper_appointment_flow()
    test_session_isolation() 