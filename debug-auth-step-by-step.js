const axios = require('axios');

async function debugAuthStepByStep() {
  console.log('üîç DEBUGGEANDO AUTENTICACI√ìN PASO A PASO\n');
  console.log('=' .repeat(60));

  try {
    // 1. Verificar que el endpoint de auth est√© disponible
    console.log('\n1Ô∏è‚É£ Verificando disponibilidad del endpoint de auth...');
    try {
      const optionsResponse = await axios.options('https://experimento2-production-54c0.up.railway.app/api/auth/login');
      console.log('   ‚úÖ OPTIONS request exitoso');
      console.log('   üìã Headers permitidos:', optionsResponse.headers['access-control-allow-headers']);
      console.log('   üîÑ M√©todos permitidos:', optionsResponse.headers['access-control-allow-methods']);
    } catch (error) {
      console.log('   ‚ùå OPTIONS request fall√≥:', error.message);
    }

    // 2. Probar login con diferentes formatos de datos
    console.log('\n2Ô∏è‚É£ Probando diferentes formatos de login...');
    
    const testCases = [
      {
        name: 'Formato est√°ndar',
        data: { email: 'test@example.com', password: 'test123' }
      },
      {
        name: 'Con espacios extra',
        data: { email: ' test@example.com ', password: ' test123 ' }
      },
      {
        name: 'Con campos adicionales',
        data: { email: 'test@example.com', password: 'test123', extra: 'field' }
      }
    ];

    for (const testCase of testCases) {
      console.log(`\n   üß™ ${testCase.name}:`);
      try {
        const response = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', testCase.data);
        console.log('      ‚úÖ √âxito!');
        console.log('      üìä Respuesta:', JSON.stringify(response.data, null, 2));
        break; // Si uno funciona, no necesitamos probar m√°s
      } catch (error) {
        console.log(`      ‚ùå Fall√≥: ${error.response?.data?.message || error.message}`);
        if (error.response?.data) {
          console.log('      üîç Detalles:', JSON.stringify(error.response.data, null, 2));
        }
      }
    }

    // 3. Verificar si hay problemas de CORS o headers
    console.log('\n3Ô∏è‚É£ Verificando headers y CORS...');
    try {
      const response = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
        email: 'test@example.com',
        password: 'test123'
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'User-Agent': 'Test-Script/1.0'
        }
      });
      console.log('   ‚úÖ Login exitoso con headers personalizados');
    } catch (error) {
      console.log('   ‚ùå Login fall√≥ con headers personalizados:', error.response?.data?.message || error.message);
    }

    // 4. Verificar si el problema est√° en la validaci√≥n
    console.log('\n4Ô∏è‚É£ Verificando validaci√≥n de datos...');
    try {
      const response = await axios.post('https://experimento2-production-54c0.up.railway.app/api/auth/login', {
        email: 'invalid-email',
        password: 'test123'
      });
      console.log('   ‚úÖ Login con email inv√°lido funcion√≥ (no deber√≠a)');
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('   ‚úÖ Validaci√≥n funcionando (email inv√°lido rechazado)');
      } else {
        console.log('   ‚ùå Validaci√≥n no funcionando como esperado:', error.response?.status);
      }
    }

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }

  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ DEBUG COMPLETADO');
}

debugAuthStepByStep();
